{
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
    "runs": [
        {
            "tool": {
                "driver": {
                    "name": "Polaris",
                    "organization": "Synopsys",
                    "rules": [
                        {
                            "id": "CVE-2021-30640 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-30640)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to bypass of `LockDown` realm protections via incorrect parameter escaping."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to bypass of `LockDown` realm protections via incorrect parameter escaping.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-30640](https://openhub.net/vulnerabilities/bdsa/CVE-2021-30640) - Improper Authentication\n\n\n\n## Solution\nFixed in:\n* [**10.0.6**](https://archive.apache.org/dist/tomcat/tomcat-10/v10.0.6/) by the following commits: \n\t* [Commit 1](https://github.com/apache/tomcat/commit/24dfb30076997b640e5123e92c4b8d7f206f609c)\n\t* [Commit 2](https://github.com/apache/tomcat/commit/0a272b00aed57526dbfc8b881ab253c23c61f100)\n\t* [Commit 3](https://github.com/apache/tomcat/commit/c9f21a2a7908c7c4ecd4f9bb495d3ee36a2bd822)\n\t* [Commit 4](hhttps://github.com/apache/tomcat/commit/4e86b4ea0d1a9b00fa93971c31b93ad1bd49c7fe)\n\t* [Commit 5](https://github.com/apache/tomcat/commit/79580e7f70a07c083be07307376511bb864d5a7b)\n\t* [Commit 6](https://github.com/apache/tomcat/commit/d3407672774e372fae8b5898d55f85d16f22b972)\n\t* [Commit 7](https://github.com/apache/tomcat/commit/6a9129ac9bd06555ce04bb564a76fc3987311f38)\n\t* [Commit 8](https://github.com/apache/tomcat/commit/ad22db641dcd61c2e8078f658fa709897b5da375)\n* [**9.0.46**](https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.46/)  by the following commits:\n\t* [Commit 1](https://github.com/apache/tomcat/commit/c4df8d44a959a937d507d15e5b1ca35c3dbc41eb)\n\t* [Commit 2](https://github.com/apache/tomcat/commit/749f3cc192c68c34f2375509aea087be45fc4434)\n\t* [Commit 3](https://github.com/apache/tomcat/commit/c6b6e1015ae44c936971b6bf8bce70987935b92e)\n\t* [Commit 4](https://github.com/apache/tomcat/commit/91ecdc61ce3420054c04114baaaf1c1e0cbd5d56)\n\t* [Commit 5](https://github.com/apache/tomcat/commit/e50067486cf86564175ca0cfdcbf7d209c6df862)\n\t* [Commit 6](https://github.com/apache/tomcat/commit/b5585a9e5d4fec020cc5ebadb82f899fae22bc43)\n\t* [Commit 7](https://github.com/apache/tomcat/commit/329932012d3a9b95fde0b18618416e659ecffdc0)\n\t* [Commit 8](https://github.com/apache/tomcat/commit/3ce84512ed8783577d9945df28da5a033465b945)\n* [**8.5.66**](https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.66/)  by the following commits:\n\t* [Commit 1](https://github.com/apache/tomcat/commit/f4d9bdef53ec009b7717620d890465fa273721a6)\n\t* [Commit 2](https://github.com/apache/tomcat/commit/4e61e1d625a4a64d6b775e3a03c77a0b100d56d7)\n\t* [Commit 3](https://github.com/apache/tomcat/commit/d5303a506c7533803d2b3bc46e6120ce673a6667)\n\t* [Commit 4](https://github.com/apache/tomcat/commit/b930d0b3161d9ec78d5fa57f886ed2de4680518b)\n\t* [Commit 5](https://github.com/apache/tomcat/commit/17208c645d68d2af1444ee8c64f36a9b8f0ba76f)\n\t* [Commit 6](https://github.com/apache/tomcat/commit/bd4d1fbe9146dff4714130594afd668406a6a5ef)\n\t* [Commit 7](https://github.com/apache/tomcat/commit/81f16b0a7186ed02efbfac336589d6cff28d1e89)\n\t* [Commit 8](https://github.com/apache/tomcat/commit/eeb7351219bd8803c0053e1e80444664a7cf5b51)\n* [**7.0.109**](https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.109/) by [this](https://github.com/apache/tomcat/commit/e21eb4764ccda55e5a35a5a7c19a6fd2b0757fe9) commit\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to bypass of `LockDown` realm protections via incorrect parameter escaping."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-287"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-33037 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-33037)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling via incorrect processing of `Transfer-Encoding` header."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to HTTP request smuggling via incorrect processing of `Transfer-Encoding` header.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-33037](https://openhub.net/vulnerabilities/bdsa/CVE-2021-33037) - HTTP Request Smuggling\n\n\n\n## Solution\nFixed in:\n* [**10.0.7**](https://archive.apache.org/dist/tomcat/tomcat-10/v10.0.7/) by the following commits: \n[Commit 1](https://github.com/apache/tomcat/commit/3202703e6d635e39b74262e81f0cb4bcbe2170dc)\n[Commit 2](https://github.com/apache/tomcat/commit/da0e7cb093cf68b052d9175e469dbd0464441b0b)\n[Commit 3](https://github.com/apache/tomcat/commit/8874fa02e9b36baa9ca6b226c0882c0190ca5a02)\n* [**9.0.48**](https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.48/)  by the following commits:\n[Commit 1](https://github.com/apache/tomcat/commit/45d70a86a901cbd534f8f570bed2aec9f7f7b88e)\n[Commit 2](https://github.com/apache/tomcat/commit/05f9e8b00f5d9251fcd3c95dcfd6cf84177f46c8)\n[Commit 3](https://github.com/apache/tomcat/commit/a2c3dc4c96168743ac0bab613709a5bbdaec41d0)\n* [**8.5.68**](https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.68/)  by the following commits:\n[Commit 1](https://github.com/apache/tomcat/commit/eee0d024c1b3171560c92eaba79dd6eb8eb11bcd)\n[Commit 2](https://github.com/apache/tomcat/commit/506134f957a4be2c5b4a9334f7b3435fc954dbc1)\n[Commit 3](https://github.com/apache/tomcat/commit/19d11556d0db99df291df33605f137976d152475)\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling via incorrect processing of `Transfer-Encoding` header."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-444"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-42340 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-42340)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to denial-of-service (DoS) due to a memory leak in the HTTP upgrade handler for `WebSocket` connections. The memory leak could use up the available memory resources which would prevent Tomcat from operating normally."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to denial-of-service (DoS) due to a memory leak in the HTTP upgrade handler for `WebSocket` connections. The memory leak could use up the available memory resources which would prevent Tomcat from operating normally.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-42340](https://openhub.net/vulnerabilities/bdsa/CVE-2021-42340) - Missing Release of Memory after Effective Lifetime\n\n\n\n## Solution\nFixed in:\n* **[8.5.72](https://github.com/apache/tomcat/releases/tag/8.5.72)** by [this](https://github.com/apache/tomcat/commit/d27535bdee) commit\n* **[9.0.54](https://github.com/apache/tomcat/releases/tag/9.0.54)** by [this](https://github.com/apache/tomcat/commit/80f1438ec4) commit\n* **[10.0.12](https://github.com/apache/tomcat/releases/tag/10.0.12)** by [this](https://github.com/apache/tomcat/commit/31d6242664) commit\n* **[10.1.0-m6](https://github.com/apache/tomcat/releases/tag/10.1.0-M6)** by [this](https://github.com/apache/tomcat/commit/d5a6660cba) commit\n\nThe latest stable releases can be found [here](https://tomcat.apache.org/download-10.cgi).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-401](https://cwe.mitre.org/data/definitions/401.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to denial-of-service (DoS) due to a memory leak in the HTTP upgrade handler for `WebSocket` connections. The memory leak could use up the available memory resources which would prevent Tomcat from operating normally."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-401"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-23181 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-23181)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat contains a TOCTOU vulnerability that was introduced when fixing CVE-2020-9484. This vulnerability allows a local attacker to perform actions with the privileges of the user that the Tomcat process is using. \n\n**Note**: This issue is only exploitable when Tomcat is configured to persist sessions using the `FileStore`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat contains a TOCTOU vulnerability that was introduced when fixing CVE-2020-9484. This vulnerability allows a local attacker to perform actions with the privileges of the user that the Tomcat process is using. \n\n**Note**: This issue is only exploitable when Tomcat is configured to persist sessions using the `FileStore`.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-23181](https://openhub.net/vulnerabilities/bdsa/CVE-2022-23181) - Time-of-check Time-of-use (TOCTOU) Race Condition\n\n\n\n## Solution\nFixed in:\n* **[8.5.74](https://github.com/apache/tomcat/releases/tag/8.5.74)** by [this](https://github.com/apache/tomcat/commit/97943959ba) commit\n* **[9.0.57](https://github.com/apache/tomcat/releases/tag/9.0.57)** by [this](https://github.com/apache/tomcat/commit/1385c624b4) commit\n* **[10.0.15](https://github.com/apache/tomcat/releases/tag/10.0.15)** by [this](https://github.com/apache/tomcat/commit/094800b12d) commit\n* **[10.1.0-m10](https://github.com/apache/tomcat/releases/tag/10.1.0-M10)** by [this](https://github.com/apache/tomcat/commit/70da1aaa51) commit\n\nThe latest stable releases can be found [here](https://tomcat.apache.org/).\n\n**Note**: This issue was fixed in Apache Tomcat **10.1.0-M9**, **10.0.15**, **9.0.57** and **8.5.74** but the release vote for those release candidates did not pass.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html)\n\n",
                                "text": "Apache Tomcat contains a TOCTOU vulnerability that was introduced when fixing CVE-2020-9484. This vulnerability allows a local attacker to perform actions with the privileges of the user that the Tomcat process is using. \n\n**Note**: This issue is only exploitable when Tomcat is configured to persist sessions using the `FileStore`."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-367"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-29885 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-29885)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat's documentation incorrectly states that `EncryptInterceptor` allows Tomcat clustering to run over untrusted networks. However, `EncryptInterceptor` only provides confidentiality and integrity protection, but does not prevent the possibility of denial-of-service (DoS) attacks."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat's documentation incorrectly states that `EncryptInterceptor` allows Tomcat clustering to run over untrusted networks. However, `EncryptInterceptor` only provides confidentiality and integrity protection, but does not prevent the possibility of denial-of-service (DoS) attacks.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-29885](https://openhub.net/vulnerabilities/bdsa/CVE-2022-29885) - Omission of Security-relevant Information\n\n\n\n## Solution\nFixed through documentation updates in:\n* [**10.1.0-M15**](https://github.com/apache/tomcat/releases/tag/10.1.0-M15) by [this](https://github.com/apache/tomcat/commit/0fa7721f11) commit, \n* [**10.0.21**](https://github.com/apache/tomcat/releases/tag/10.0.21) by [this](https://github.com/apache/tomcat/commit/36826ea638) commit,\n* [**9.0.63**](https://github.com/apache/tomcat/releases/tag/9.0.63) by [this](https://github.com/apache/tomcat/commit/eaafd28296) commit,\n* [**8.5.79**](https://github.com/apache/tomcat/releases/tag/8.5.79) by [this](https://github.com/apache/tomcat/commit/b679bc627f5a4ea6510af95adfb7476b07eba890) commit\nThe latest stable releases can be found [here](https://tomcat.apache.org/download-10.cgi).\n\n## Workaround\nThe vendor advises using the following mitigation:\n\u003e Users running clustering over an untrusted network who require full protection should switch to an alternative solution such as running the clustering communication over a VPN.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-223](https://cwe.mitre.org/data/definitions/223.html)\n\n",
                                "text": "Apache Tomcat's documentation incorrectly states that `EncryptInterceptor` allows Tomcat clustering to run over untrusted networks. However, `EncryptInterceptor` only provides confidentiality and integrity protection, but does not prevent the possibility of denial-of-service (DoS) attacks."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-223"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-34305 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-34305)"
                            },
                            "fullDescription": {
                                "text": "The form authentication example in Apache Tomcat is vulnerable to cross-site scripting (XSS). If the code for this example form is used in production it could be exploited to steal user session tokens or perform actions on other users' behalf."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nThe form authentication example in Apache Tomcat is vulnerable to cross-site scripting (XSS). If the code for this example form is used in production it could be exploited to steal user session tokens or perform actions on other users' behalf.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2022-34305](https://openhub.net/vulnerabilities/bdsa/CVE-2022-34305) - Improper Neutralization of Script-Related HTML Tags in Web Pages\n\n\n\n## Solution\nFixed in:\n* [**8.5.82**](https://github.com/apache/tomcat/releases/tag/8.5.82)** by [this](https://github.com/apache/tomcat/commit/5f6c88b054) commit,\n* [**9.0.65**](https://github.com/apache/tomcat/releases/tag/9.0.65)** by [this](https://github.com/apache/tomcat/commit/8b60af90b9) commit,\n* [**10.0.23**](https://github.com/apache/tomcat/releases/tag/10.0.23)** by [this](https://github.com/apache/tomcat/commit/1a7e95d9c3) commit,\n* [**10.1.0-m17**](https://github.com/apache/tomcat/releases/tag/10.1.0-M17)  by [this](https://github.com/apache/tomcat/commit/d6251d1cfb) commit.\n\n## Workaround\nRemoving the examples web application and all of the Form authentication code used in production would mitigate the issue.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html)\n\n",
                                "text": "The form authentication example in Apache Tomcat is vulnerable to cross-site scripting (XSS). If the code for this example form is used in production it could be exploited to steal user session tokens or perform actions on other users' behalf."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-80"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-42252 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-42252)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat does not fully respect the intent of the `rejectIllegalHeader` configuration option to drop all requests with illegal headers. A remote attacker could potentially smuggle requests with a specially crafted `Content-Length` header when Tomcat is also behind a reverse proxy that does the same. \n\n**Note:** This vulnerability only manifests when `rejectIllegalHeader` is set to `false`, which is **not** the default setting for any version higher than the **8.5.x** series."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat does not fully respect the intent of the `rejectIllegalHeader` configuration option to drop all requests with illegal headers. A remote attacker could potentially smuggle requests with a specially crafted `Content-Length` header when Tomcat is also behind a reverse proxy that does the same. \n\n**Note:** This vulnerability only manifests when `rejectIllegalHeader` is set to `false`, which is **not** the default setting for any version higher than the **8.5.x** series.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-42252](https://openhub.net/vulnerabilities/bdsa/CVE-2022-42252) - HTTP Request Smuggling\n\n\n\n## Solution\nFixed in:\n* [**8.5.83**](https://github.com/apache/tomcat/releases/tag/8.5.83) by [this](https://github.com/apache/tomcat/commit/a1c07906d8) commit.\n* [**9.0.68**](https://github.com/apache/tomcat/releases/tag/9.0.68) by [this](https://github.com/apache/tomcat/commit/4c7f4fd09d) commit.\n* [**10.0.27**](https://github.com/apache/tomcat/releases/tag/10.0.27) by [this](https://github.com/apache/tomcat/commit/0d089a1504) commit.\n* [**10.1.1**](https://github.com/apache/tomcat/releases/tag/10.1.1) by [this](https://github.com/apache/tomcat/commit/c9fe754e5d) commit.\n\nThe latest versions are available [here](https://github.com/apache/tomcat/tags).\n\n## Workaround\nThe vendor advises the following to mitigate the issue:\n\u003e Ensure `rejectIllegalHeader` is set to true.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n",
                                "text": "Apache Tomcat does not fully respect the intent of the `rejectIllegalHeader` configuration option to drop all requests with illegal headers. A remote attacker could potentially smuggle requests with a specially crafted `Content-Length` header when Tomcat is also behind a reverse proxy that does the same. \n\n**Note:** This vulnerability only manifests when `rejectIllegalHeader` is set to `false`, which is **not** the default setting for any version higher than the **8.5.x** series."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-444"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-45143 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-45143)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat's `JsonErrorReportValve` module does not escape the `type`, `message` or `description` values. In cases where these values are constructed from user provided data it is possible for users to manipulate or invalidate the JSON output."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat's `JsonErrorReportValve` module does not escape the `type`, `message` or `description` values. In cases where these values are constructed from user provided data it is possible for users to manipulate or invalidate the JSON output.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-45143](https://openhub.net/vulnerabilities/bdsa/CVE-2022-45143) - Improper Neutralization of Escape, Meta, or Control Sequences\n\n\n\n## Solution\nFixed in:\n* [**8.5.84**](https://github.com/apache/tomcat/releases/tag/8.5.84) by [this](https://github.com/apache/tomcat/commit/0cab3a56bd) commit,\n* [**9.0.69**](https://github.com/apache/tomcat/releases/tag/9.0.69) by [this](https://github.com/apache/tomcat/commit/b336f4e588) commit,\n* [**10.1.2**](https://github.com/apache/tomcat/releases/tag/10.1.2) by [this](https://github.com/apache/tomcat/commit/1f50bff8da) commit,\n* [**11.0.0-M1**](https://github.com/apache/tomcat/releases/tag/11.0.0-M1) by [this](https://github.com/apache/tomcat/commit/6a0ac6a438) commit.\n\nThe latest stable releases can be found [here](https://tomcat.apache.org/download-10.cgi).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-150](https://cwe.mitre.org/data/definitions/150.html)\n\n",
                                "text": "Apache Tomcat's `JsonErrorReportValve` module does not escape the `type`, `message` or `description` values. In cases where these values are constructed from user provided data it is possible for users to manipulate or invalidate the JSON output."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-150"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2023-0357 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2023-0357)"
                            },
                            "fullDescription": {
                                "text": "Apache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability was not properly fixed in Apache Tomcat and required an additional disclosure as **CVE-2023-28709** (**BDSA-2023-1242**). The fix for Apache Commons FileUpload was not affected."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability was not properly fixed in Apache Tomcat and required an additional disclosure as **CVE-2023-28709** (**BDSA-2023-1242**). The fix for Apache Commons FileUpload was not affected.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0357](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0357) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in Apache Commons FileUpload  version [**1.5-RC1**](https://github.com/apache/commons-fileupload/releases/tag/commons-fileupload-1.5-RC1) by [this](https://github.com/apache/commons-fileupload/commit/e20c04990f7420ca917e96a84cec58b13a1b3d17) commit.\n\nThe latest stable releases of Apache Commons FileUpload can be found [here](https://github.com/apache/commons-fileupload/tags).\n\nHowever, it is stated that Apache Commons FileUpload does not enable any limits by default. Thus, after applying the fixing commit, the new configuration option `FileUploadBase#setFileCountMax` must be explicitly configured.\n\nFixed in Apache Tomcat:\n* [**8.5.88**](https://github.com/apache/tomcat/releases/tag/8.5.88) by [this](https://github.com/apache/tomcat/commit/5badf94e79) commit,\n* [**9.0.74**](https://github.com/apache/tomcat/releases/tag/9.0.74) by [this](https://github.com/apache/tomcat/commit/fbd8142162) commit,\n* [**10.1.8**](https://github.com/apache/tomcat/releases/tag/10.1.8) by [this](https://github.com/apache/tomcat/commit/ba848da71c) commit,\n* [**11.0.0-M5**](https://github.com/apache/tomcat/releases/tag/11.0.0-M5) by [this](https://github.com/apache/tomcat/commit/d53d8e7f77042cc32a3b98f589496a1ef5088e38) commit.\n\nThe latest stable releases of Apache Tomcat are available [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Apache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability was not properly fixed in Apache Tomcat and required an additional disclosure as **CVE-2023-28709** (**BDSA-2023-1242**). The fix for Apache Commons FileUpload was not affected."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-28708 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-28708)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to information disclosure due to a missing JSessionId secure attribute. Successful exploitation of this attack could result in an unauthenticated attacker being able to view the session cookie belonging to the user agent."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to information disclosure due to a missing JSessionId secure attribute. Successful exploitation of this attack could result in an unauthenticated attacker being able to view the session cookie belonging to the user agent.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-28708](https://openhub.net/vulnerabilities/bdsa/CVE-2023-28708) - Sensitive Data Exposure\n\n\n\n## Solution\nFixed in:\n* [**8.5.86**](https://github.com/apache/tomcat/releases/tag/8.5.86) by [this](https://github.com/apache/tomcat/commit/5b72c94e8b) commit,\n* [**9.0.72**](https://github.com/apache/tomcat/releases/tag/9.0.72) by [this](https://github.com/apache/tomcat/commit/3b51230764) commit,\n* [**10.1.6**](https://github.com/apache/tomcat/releases/tag/10.1.6) by [this](https://github.com/apache/tomcat/commit/f509bbf31f) commit,\n* [**11.0.0-M3**](https://github.com/apache/tomcat/releases/tag/11.0.0-M3) by [this](https://github.com/apache/tomcat/commit/c64d496) commit. \n\nThe latest stable releases can be found [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to information disclosure due to a missing JSessionId secure attribute. Successful exploitation of this attack could result in an unauthenticated attacker being able to view the session cookie belonging to the user agent."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-200"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2023-1242 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2023-1242)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat does not sufficiently limit the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability exists due to an incomplete fix for **CVE-2023-24998** (**BDSA-2023-0357**) in Apache Tomcat.\n\n**Note:** The vendor has stated that this vulnerability exists if non-default HTTP connector settings are used such that the `maxParameterCount` could be reached using query string parameters."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat does not sufficiently limit the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability exists due to an incomplete fix for **CVE-2023-24998** (**BDSA-2023-0357**) in Apache Tomcat.\n\n**Note:** The vendor has stated that this vulnerability exists if non-default HTTP connector settings are used such that the `maxParameterCount` could be reached using query string parameters.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1242](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1242) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in:\n* [**8.5.88**](https://github.com/apache/tomcat/releases/tag/8.5.88) by [this](https://github.com/apache/tomcat/commit/5badf94e79) commit,\n* [**9.0.74**](https://github.com/apache/tomcat/releases/tag/9.0.74) by [this](https://github.com/apache/tomcat/commit/fbd8142162) commit,\n* [**10.1.8**](https://github.com/apache/tomcat/releases/tag/10.1.8) by [this](https://github.com/apache/tomcat/commit/ba848da71c) commit,\n* [**11.0.0-M5**](https://github.com/apache/tomcat/releases/tag/11.0.0-M5) by [this](https://github.com/apache/tomcat/commit/d53d8e7) commit.\n\nThe latest stable releases are available [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Apache Tomcat does not sufficiently limit the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability exists due to an incomplete fix for **CVE-2023-24998** (**BDSA-2023-0357**) in Apache Tomcat.\n\n**Note:** The vendor has stated that this vulnerability exists if non-default HTTP connector settings are used such that the `maxParameterCount` could be reached using query string parameters."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-41080 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-41080)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to open redirects because of insufficient input validation. This vulnerability affects ROOT (default) web applications that have been configured to use `FORM` authentication feature. It can allow an attacker to trick a victim into accessing a specially crafted URL that redirects to an attacker-controlled location.\n\n**Note:** The scope of this vulnerability is limited to the ROOT (default) web application."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to open redirects because of insufficient input validation. This vulnerability affects ROOT (default) web applications that have been configured to use `FORM` authentication feature. It can allow an attacker to trick a victim into accessing a specially crafted URL that redirects to an attacker-controlled location.\n\n**Note:** The scope of this vulnerability is limited to the ROOT (default) web application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-41080](https://openhub.net/vulnerabilities/bdsa/CVE-2023-41080) - Open URL Redirect\n\n\n\n## Solution\nFixed in:\n* **[8.5.93](https://github.com/apache/tomcat/releases/tag/8.5.93)** by [this](https://github.com/apache/tomcat/commit/4998ad745b67edeadefe541c94ed029b53933d3b) commit,\n* **[9.0.80](https://github.com/apache/tomcat/releases/tag/9.0.80)** by [this](https://github.com/apache/tomcat/commit/77c0ce2d169efa248b64b992e547aad549ec906b) commit,\n* **[10.1.13](https://github.com/apache/tomcat/releases/tag/10.1.13)** by [this](https://github.com/apache/tomcat/commit/bb4624a9f3e69d495182ebfa68d7983076407a27) commit,\n* **[11.0.0-M11](https://github.com/apache/tomcat/releases/tag/11.0.0-M11)** by [this](https://github.com/apache/tomcat/commit/e3703c9abb8fe0d5602f6ba8a8f11d4b6940815a) commit.\n\nThe latest stable releases can be found [here](https://tomcat.apache.org/download-11.cgi).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to open redirects because of insufficient input validation. This vulnerability affects ROOT (default) web applications that have been configured to use `FORM` authentication feature. It can allow an attacker to trick a victim into accessing a specially crafted URL that redirects to an attacker-controlled location.\n\n**Note:** The scope of this vulnerability is limited to the ROOT (default) web application."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-601"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-45648 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-45648)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling due to improper parsing of HTTP trailer within the header. An attacker could exploit this vulnerability by supplying a specially crafted HTTP request containing invalid trailer field names or values from a reversed proxy, in order to bypass security access controls such as a web application firewall (WAF) or an intrusion detection system (IDS)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to HTTP request smuggling due to improper parsing of HTTP trailer within the header. An attacker could exploit this vulnerability by supplying a specially crafted HTTP request containing invalid trailer field names or values from a reversed proxy, in order to bypass security access controls such as a web application firewall (WAF) or an intrusion detection system (IDS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-45648](https://openhub.net/vulnerabilities/bdsa/CVE-2023-45648) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/c83fe47725) commit,\n* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/5958324563) commit,\n* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/8ecff30650) commit,\n* [**11.0.0-m12**](https://github.com/apache/tomcat/releases/tag/11.0.0-m12) by [this](https://github.com/apache/tomcat/commit/eb5c094e5560764cda436362254997511a3ca1f6) commit.\n\nThe latest stable releases can be found [here](https://github.com/apache/tomcat/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n* Common Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling due to improper parsing of HTTP trailer within the header. An attacker could exploit this vulnerability by supplying a specially crafted HTTP request containing invalid trailer field names or values from a reversed proxy, in order to bypass security access controls such as a web application firewall (WAF) or an intrusion detection system (IDS)."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20",
                                    "external/cwe/cwe-444"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-44487 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-44487)"
                            },
                            "fullDescription": {
                                "text": "The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-44487](https://openhub.net/vulnerabilities/bdsa/CVE-2023-44487) - Uncontrolled Resource Consumption\n\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX [**1.25.3**](https://hg.nginx.org/nginx/rev/release-1.25.3) by [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3-rc0**](https://github.com/apache/trafficserver/releases/tag/9.2.3-rc0) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9-rc0**](https://github.com/apache/trafficserver/releases/tag/8.1.9-rc0) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd [**1.4.73**](https://github.com/lighttpd/lighttpd1.4/releases/tag/lighttpd-1.4.73) by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit,\n * h2o fixed in the **master** branch by [this](https://github.com/h2o/h2o/commit/28fe15117b909588bf14269a0e1c6ec4548579fe) commit which is not yet included in any release.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n",
                                "text": "The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-400"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-42795 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-42795)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat contains an information exposure vulnerability due to insufficient error handling within the internal object recycling method. An attacker could exploit this issue to gain unauthorized access to sensitive information contained within the request/response when an error occurs in recycling."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat contains an information exposure vulnerability due to insufficient error handling within the internal object recycling method. An attacker could exploit this issue to gain unauthorized access to sensitive information contained within the request/response when an error occurs in recycling.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-42795](https://openhub.net/vulnerabilities/bdsa/CVE-2023-42795) - Sensitive Data Exposure\n\n\n\n## Solution\nFixed in:\n* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/30f8063d7a) commit,\n* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/44d05d75d6) commit,\n* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/9375d67106) commit,\n* [**11.0.0-m12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/d6db22e411307c97ddf78315c15d5889356eca38) commit. \n\nThe latest stable releases can be found [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\n* Common Weakness Enumeration: [CWE-459](https://cwe.mitre.org/data/definitions/459.html)\n\n",
                                "text": "Apache Tomcat contains an information exposure vulnerability due to insufficient error handling within the internal object recycling method. An attacker could exploit this issue to gain unauthorized access to sensitive information contained within the request/response when an error occurs in recycling."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-200",
                                    "external/cwe/cwe-459"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-46589 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-46589)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling when used behind a reverse proxy. This allows a remote attacker to append additional HTTP request onto valid HTTP requests and can be used to bypass validation, access restricted data, or perform actions on behalf of another user or group."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to HTTP request smuggling when used behind a reverse proxy. This allows a remote attacker to append additional HTTP request onto valid HTTP requests and can be used to bypass validation, access restricted data, or perform actions on behalf of another user or group.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-46589](https://openhub.net/vulnerabilities/bdsa/CVE-2023-46589) - HTTP Request Smuggling\n\n\n\n## Solution\nFixed in versions:\n\n* [**8.5.96**](https://github.com/apache/tomcat/releases/tag/8.5.96) by [this](https://github.com/apache/tomcat/commit/aa92971e879a519384c517febc39fd04c48d4642) commit.\n* [**9.0.83**](https://github.com/apache/tomcat/releases/tag/9.0.83) by [this](https://github.com/apache/tomcat/commit/7a2d8818fcea0b51747a67af9510ce7977245ebd) commit.\n* [**10.1.16**](https://github.com/apache/tomcat/releases/tag/10.1.16) by [this](https://github.com/apache/tomcat/commit/b5776d769bffeade865061bc8ecbeb2b56167b08) commit.\n* [**11.0.0-M11**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/6f181e1062a472bc5f0234980f66cbde42c1041b) commit.\n\nThe latest stable releases can be found [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling when used behind a reverse proxy. This allows a remote attacker to append additional HTTP request onto valid HTTP requests and can be used to bypass validation, access restricted data, or perform actions on behalf of another user or group."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-444"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-43980 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-core 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-43980)"
                            },
                            "fullDescription": {
                                "text": "The simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-core 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nThe simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2021-43980](https://openhub.net/vulnerabilities/bdsa/CVE-2021-43980) - Race Condition due to Improper Synchronization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-core:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n",
                                "text": "The simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-362"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-beans 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-beans:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-expression 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework:spring-expression:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aspects 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework:spring-aspects:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-web 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-web:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-web 2.4.5 (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-web 2.4.5 (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-web 2.4.5 (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-web 2.4.5 (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-web 2.4.5 (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-web 2.4.5 (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-web 2.4.5 (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter 2.4.5 from spring-boot-starter-web 2.4.5 (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter 2.4.5 from spring-boot-starter-web 2.4.5 (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter 2.4.5 from spring-boot-starter-web 2.4.5 (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter:2.4.5\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-autoconfigure 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot-autoconfigure:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-autoconfigure 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot-autoconfigure:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-autoconfigure 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot-autoconfigure:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-autoconfigure 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot-autoconfigure:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-autoconfigure 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot-autoconfigure:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-autoconfigure 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot-autoconfigure:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-autoconfigure 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot-autoconfigure:2.4.5\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-dependencies 2.3.1.RELEASE from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-dependencies 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-dependencies 2.3.1.RELEASE from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-dependencies 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-dependencies 2.3.1.RELEASE from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-dependencies 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-dependencies 2.3.1.RELEASE from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-dependencies 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-dependencies 2.3.1.RELEASE from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-dependencies 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-dependencies 2.3.1.RELEASE from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-dependencies 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-dependencies 2.3.1.RELEASE from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-dependencies 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-42889 commons-text 1.8: org.apache.commons",
                            "shortDescription": {
                                "text": "Direct Dependency: commons-text 1.8 (CVE-2022-42889)"
                            },
                            "fullDescription": {
                                "text": "Apache Commons Text is vulnerable to remote code execution (RCE) due to insufficient default restrictions on the dynamic evaluation of `${...}` strings during variable interpolation with the `StringSubstitutor` API. An attacker could exploit this vulnerability by supplying maliciously crafted input to an application using this API, with the default interpolation lookups `script`, `dns` or `url`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| commons-text 1.8  | 1.11.0  | 1.11.0 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/ada1d85c-91f3-4586-bcf6-7170456c8f13?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=f2c3b205-3e60-4d6c-a8ac-7d044b30f7c6)\n\n\n## Description\nApache Commons Text is vulnerable to remote code execution (RCE) due to insufficient default restrictions on the dynamic evaluation of `${...}` strings during variable interpolation with the `StringSubstitutor` API. An attacker could exploit this vulnerability by supplying maliciously crafted input to an application using this API, with the default interpolation lookups `script`, `dns` or `url`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2022-42889](https://openhub.net/vulnerabilities/bdsa/CVE-2022-42889) - Improper Control of Generation of Code ('Code Injection')\n\n\n\n## Solution\nFixed in version [**1.10.0-RC1**](https://github.com/apache/commons-text/releases/tag/commons-text-1.10.0-RC1) by [this](https://github.com/apache/commons-text/commit/b9b40b903e2d1f9935039803c9852439576780ea) commit.\n\nThe latest stable releases can be found [here](https://commons.apache.org/proper/commons-text/download_text.cgi).\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html)\n\n",
                                "text": "Apache Commons Text is vulnerable to remote code execution (RCE) due to insufficient default restrictions on the dynamic evaluation of `${...}` strings during variable interpolation with the `StringSubstitutor` API. An attacker could exploit this vulnerability by supplying maliciously crafted input to an application using this API, with the default interpolation lookups `script`, `dns` or `url`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-94"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-27568 json-smart 2.3: nimbus-jose-jwt 8.3: net.minidev",
                            "shortDescription": {
                                "text": "Transitive Dependency: json-smart 2.3 from nimbus-jose-jwt 8.3 (CVE-2021-27568)"
                            },
                            "fullDescription": {
                                "text": "A vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| nimbus-jose-jwt 8.3  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| json-smart 2.3  | 2.5.0  | 2.5.0 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/ed802e1f-bb16-4b37-9d44-5b8d0e93aa2e?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ae37e408-4fec-4624-9a19-d16a0f56bd11)\n\n\n## Description\nA vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2021-27568](https://openhub.net/vulnerabilities/bdsa/CVE-2021-27568) - Sensitive Data Exposure\n\n\n\n## Solution\nFixed in:\n* **json-smart-v1** version [**1.3.2**](https://github.com/netplex/json-smart-v1/releases/tag/1.3.2) by [this](https://github.com/netplex/json-smart-v1/commit/768db58ee0e3e344fcdb574b7629765308a1d0af) commit.\n* **json-smart-v2** version **2.3.1** by [this](https://github.com/netplex/json-smart-v2/commit/b3d52aa168e5a474c70a8e9ec69f823c2e7216ca) commit.\n* **json-smart-v2** version [**2.4.1**](https://github.com/netplex/json-smart-v2/releases/tag/2.4.1) by [this](https://github.com/netplex/json-smart-v2/commit/550411600d5e60e372618fa7c90c8bd82f954e67) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - com.nimbusds:nimbus-jose-jwt:8.3\n        - net.minidev:json-smart:2.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n",
                                "text": "A vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-200",
                                    "external/cwe/cwe-400"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-1370 json-smart 2.3: nimbus-jose-jwt 8.3: net.minidev",
                            "shortDescription": {
                                "text": "Transitive Dependency: json-smart 2.3 from nimbus-jose-jwt 8.3 (CVE-2023-1370)"
                            },
                            "fullDescription": {
                                "text": "json-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| nimbus-jose-jwt 8.3  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| json-smart 2.3  | 2.5.0  | 2.5.0 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/ed802e1f-bb16-4b37-9d44-5b8d0e93aa2e?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ae37e408-4fec-4624-9a19-d16a0f56bd11)\n\n\n## Description\njson-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-1370](https://openhub.net/vulnerabilities/bdsa/CVE-2023-1370) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**2.4.9**](https://github.com/netplex/json-smart-v2/releases/tag/2.4.9) by [this](https://github.com/netplex/json-smart-v2/commit/5b3205d051952d3100aa0db1535f6ba6226bd87a) commit.\n\nThe latest stable releases can be found [here](https://github.com/netplex/json-smart-v2/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - com.nimbusds:nimbus-jose-jwt:8.3\n        - net.minidev:json-smart:2.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "json-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-orm 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-orm:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-webmvc 5.3.6 from spring-boot-starter-web 2.4.5 (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework:spring-webmvc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-tomcat 2.4.5 from spring-boot-starter-web 2.4.5 (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-tomcat 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-tomcat:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-tomcat 2.4.5 from spring-boot-starter-web 2.4.5 (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-tomcat 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-tomcat:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-tomcat 2.4.5 from spring-boot-starter-web 2.4.5 (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-tomcat 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-tomcat:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-tomcat 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-tomcat 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-tomcat:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-tomcat 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-tomcat 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-tomcat:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-tomcat 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-tomcat 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-tomcat:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-tomcat 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-tomcat 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-tomcat:2.4.5\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-45688 json 20190722: org.json",
                            "shortDescription": {
                                "text": "Direct Dependency: json 20190722 (CVE-2022-45688)"
                            },
                            "fullDescription": {
                                "text": "JSON-Java contains a vulnerability which can result in a stack-based buffer overflow. A remote attacker could exploit this vulnerability by using a crafted XML file in order to cause a denial-of-service (DoS) condition."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| json 20190722  | 20190722.0.0.redhat-00002  | 20231013.0.0.redhat-00001 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/8fb653e0-e678-440a-aaff-a52e96ba460a?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=e4ee0bd5-2d0e-494f-b293-22e0314e3acb)\n\n\n## Description\nJSON-Java contains a vulnerability which can result in a stack-based buffer overflow. A remote attacker could exploit this vulnerability by using a crafted XML file in order to cause a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-45688](https://openhub.net/vulnerabilities/bdsa/CVE-2022-45688) - Stack-based Buffer Overflow\n\n\n\n## Solution\nFixed in version [**20230227**](https://github.com/stleary/JSON-java/releases/tag/20230227) by [this](https://github.com/stleary/JSON-java/commit/f566a1d9ee1f8139357017dc6c7def1da19cd8d4) and [this](https://github.com/stleary/JSON-java/commit/eb56704e68a186f975400e009d28d4e0b5d887ec) commit.\n\nThe latest stable releases can be found [here](https://github.com/stleary/JSON-java/releases).\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\n\n",
                                "text": "JSON-Java contains a vulnerability which can result in a stack-based buffer overflow. A remote attacker could exploit this vulnerability by using a crafted XML file in order to cause a denial-of-service (DoS) condition."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-121"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-5072 json 20190722: org.json",
                            "shortDescription": {
                                "text": "Direct Dependency: json 20190722 (CVE-2023-5072)"
                            },
                            "fullDescription": {
                                "text": "JSON-java contains a denial-of-service (DoS) vulnerability due to an error within the parsing of embedded null characters. Successful exploitation of this issue enables an unauthenticated attacker to supply a specially crafted string in order to implement a denial-of-service (DoS) condition."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| json 20190722  | 20190722.0.0.redhat-00002  | 20231013.0.0.redhat-00001 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/8fb653e0-e678-440a-aaff-a52e96ba460a?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=e4ee0bd5-2d0e-494f-b293-22e0314e3acb)\n\n\n## Description\nJSON-java contains a denial-of-service (DoS) vulnerability due to an error within the parsing of embedded null characters. Successful exploitation of this issue enables an unauthenticated attacker to supply a specially crafted string in order to implement a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-5072](https://openhub.net/vulnerabilities/bdsa/CVE-2023-5072) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**20231013**](https://github.com/stleary/JSON-java/releases/tag/20231013) by [this](https://github.com/stleary/JSON-java/commit/60662e2) commit.\n\nThe latest stable releases can be found [here](https://github.com/stleary/JSON-java/releases).\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "JSON-java contains a denial-of-service (DoS) vulnerability due to an error within the parsing of embedded null characters. Successful exploitation of this issue enables an unauthenticated attacker to supply a specially crafted string in order to implement a denial-of-service (DoS) condition."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-json 2.4.5 from spring-boot-starter-web 2.4.5 (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-json:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-json 2.4.5 from spring-boot-starter-web 2.4.5 (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-json:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-json 2.4.5 from spring-boot-starter-web 2.4.5 (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-json:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-json 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-json:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-json 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-json:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-json 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-json:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-json 2.4.5 from spring-boot-starter-web 2.4.5 (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-web:2.4.5\n        - org.springframework.boot:spring-boot-starter-json:2.4.5\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-2110 jakarta.el 3.0.3: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.glassfish",
                            "shortDescription": {
                                "text": "Transitive Dependency: jakarta.el 3.0.3 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-2110)"
                            },
                            "fullDescription": {
                                "text": "Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jakarta.el 3.0.3  | 3.0.4  | 4.0.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/8cc4ef37-cefd-45e0-a0ed-4c64e5724dc1?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=b7d78273-bfaf-4273-9fda-f6416dc0db2e)\n\n\n## Description\nJakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2110](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2110) - Improper Neutralization of Expression/Command Delimiters\n\n\n\n## Solution\nFixed in:\n* [**3.0.4-impl**](https://github.com/eclipse-ee4j/el-ri/releases/tag/3.0.4-impl) by [this](https://github.com/eclipse-ee4j/el-ri/commit/c76b9e6) commit\n* [**4.0.2-impl**](https://github.com/eclipse-ee4j/el-ri/releases/tag/4.0.2-impl) by [this](https://github.com/eclipse-ee4j/el-ri/commit/de73c2b) commit\n* [**5.0.0-M1-RELEASE-api**](https://github.com/eclipse-ee4j/el-ri/releases/tag/5.0.0-M1-RELEASE-api) by [this](https://github.com/eclipse-ee4j/el-ri/commit/fe0c60b) commit\n\n## Workaround\nFixed in [**3.0.3-jbossorg3**](https://github.com/jbossas/el-ri/releases/tag/3.0.3.jbossorg-3) by [this](https://github.com/jbossas/el-ri/commit/cc774521f21606ae256ffa4b293d196aec957042) commit.\n\n**Note:** this fixed release is offered by the maintainers of JBoss products.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.glassfish:jakarta.el:3.0.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-146](https://cwe.mitre.org/data/definitions/146.html)\n\n",
                                "text": "Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-146"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-44228 log4j-core 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                            "shortDescription": {
                                "text": "Transitive Dependency: log4j-core 2.13.3 from spring-boot-starter-log4j2 2.4.5 (CVE-2021-44228)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| log4j-core 2.13.3  | 2.22.1  | 2.22.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/7b9f872c-db24-4db1-bf63-2ec58c53cef8?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7460c937-f013-4c3a-bdf3-ace04cfd0304)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2021-44228](https://openhub.net/vulnerabilities/bdsa/CVE-2021-44228) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-log4j2:2.4.5\n        - org.apache.logging.log4j:log4j-core:2.13.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-45105 log4j-core 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                            "shortDescription": {
                                "text": "Transitive Dependency: log4j-core 2.13.3 from spring-boot-starter-log4j2 2.4.5 (CVE-2021-45105)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| log4j-core 2.13.3  | 2.22.1  | 2.22.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/7b9f872c-db24-4db1-bf63-2ec58c53cef8?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7460c937-f013-4c3a-bdf3-ace04cfd0304)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-45105](https://openhub.net/vulnerabilities/bdsa/CVE-2021-45105) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-log4j2:2.4.5\n        - org.apache.logging.log4j:log4j-core:2.13.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-44832 log4j-core 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                            "shortDescription": {
                                "text": "Transitive Dependency: log4j-core 2.13.3 from spring-boot-starter-log4j2 2.4.5 (CVE-2021-44832)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| log4j-core 2.13.3  | 2.22.1  | 2.22.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/7b9f872c-db24-4db1-bf63-2ec58c53cef8?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7460c937-f013-4c3a-bdf3-ace04cfd0304)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-44832](https://openhub.net/vulnerabilities/bdsa/CVE-2021-44832) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-log4j2:2.4.5\n        - org.apache.logging.log4j:log4j-core:2.13.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-45046 log4j-core 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                            "shortDescription": {
                                "text": "Transitive Dependency: log4j-core 2.13.3 from spring-boot-starter-log4j2 2.4.5 (CVE-2021-45046)"
                            },
                            "fullDescription": {
                                "text": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| log4j-core 2.13.3  | 2.22.1  | 2.22.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/7b9f872c-db24-4db1-bf63-2ec58c53cef8?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7460c937-f013-4c3a-bdf3-ace04cfd0304)\n\n\n## Description\nIt was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2021-45046](https://openhub.net/vulnerabilities/bdsa/CVE-2021-45046) - Expression Language Injection (EL-Injection)\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-log4j2:2.4.5\n        - org.apache.logging.log4j:log4j-core:2.13.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-917](https://cwe.mitre.org/data/definitions/917.html)\n\n",
                                "text": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-917"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-jdbc 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n            - org.springframework:spring-jdbc:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 log4j-jul 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                            "shortDescription": {
                                "text": "Transitive Dependency: log4j-jul 2.13.3 from spring-boot-starter-log4j2 2.4.5 (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| log4j-jul 2.13.3  | 2.22.1  | 2.22.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/06c69957-6d7b-4f82-bfa4-7747c8f55e7e?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=955f1bb4-2e63-45b5-ad0a-7de85b6c9905)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-log4j2:2.4.5\n        - org.apache.logging.log4j:log4j-jul:2.13.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 log4j-jul 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                            "shortDescription": {
                                "text": "Transitive Dependency: log4j-jul 2.13.3 from spring-boot-starter-log4j2 2.4.5 (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| log4j-jul 2.13.3  | 2.22.1  | 2.22.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/06c69957-6d7b-4f82-bfa4-7747c8f55e7e?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=955f1bb4-2e63-45b5-ad0a-7de85b6c9905)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-log4j2:2.4.5\n        - org.apache.logging.log4j:log4j-jul:2.13.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 log4j-jul 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                            "shortDescription": {
                                "text": "Transitive Dependency: log4j-jul 2.13.3 from spring-boot-starter-log4j2 2.4.5 (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| log4j-jul 2.13.3  | 2.22.1  | 2.22.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/06c69957-6d7b-4f82-bfa4-7747c8f55e7e?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=955f1bb4-2e63-45b5-ad0a-7de85b6c9905)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-log4j2:2.4.5\n        - org.apache.logging.log4j:log4j-jul:2.13.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2018-1048 h2 1.3.176: com.h2database",
                            "shortDescription": {
                                "text": "Direct Dependency: h2 1.3.176 (BDSA-2018-1048)"
                            },
                            "fullDescription": {
                                "text": "By abusing the `CREATE ALIAS` command in H2 Database an attacker could start a reverse shell and execute arbitrary code."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| h2 1.3.176  | 1.4.197  | 2.2.224 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/111d5e9e-3830-4ecb-844b-622537d88508?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=b84a5184-8627-4d38-b055-d92d33d97e35)\n\n\n## Description\nBy abusing the `CREATE ALIAS` command in H2 Database an attacker could start a reverse shell and execute arbitrary code.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2018-1048](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-1048) - Improper Control of Generation of Code ('Code Injection')\n\n\n\n\n\n## Workaround\nChange `webAllowedOthers` to `false` in `h2database/h2/src/main/org/h2/server/web/WebServer.java`.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html)\n\n",
                                "text": "By abusing the `CREATE ALIAS` command in H2 Database an attacker could start a reverse shell and execute arbitrary code."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-94"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2018-2507 h2 1.3.176: com.h2database",
                            "shortDescription": {
                                "text": "Direct Dependency: h2 1.3.176 (BDSA-2018-2507)"
                            },
                            "fullDescription": {
                                "text": "H2 Database's backup function contains an arbitrary file read flaw due to insecure file permissions. This could be exploited by an attacker supplying a specially crafted database file which triggers a symlink attack. If successfully exploited, the user could read protected files on the system without valid permissions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| h2 1.3.176  | 1.4.197  | 2.2.224 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/111d5e9e-3830-4ecb-844b-622537d88508?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=b84a5184-8627-4d38-b055-d92d33d97e35)\n\n\n## Description\nH2 Database's backup function contains an arbitrary file read flaw due to insecure file permissions. This could be exploited by an attacker supplying a specially crafted database file which triggers a symlink attack. If successfully exploited, the user could read protected files on the system without valid permissions.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2018-2507](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-2507) - UNIX Symbolic Link (Symlink) Following\n\n\n\n\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-61](https://cwe.mitre.org/data/definitions/61.html)\n\n",
                                "text": "H2 Database's backup function contains an arbitrary file read flaw due to insecure file permissions. This could be exploited by an attacker supplying a specially crafted database file which triggers a symlink attack. If successfully exploited, the user could read protected files on the system without valid permissions."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-61"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-42392 h2 1.3.176: com.h2database",
                            "shortDescription": {
                                "text": "Direct Dependency: h2 1.3.176 (CVE-2021-42392)"
                            },
                            "fullDescription": {
                                "text": "H2 Database is vulnerable to remote code execution (RCE) due to the inclusion of unsafe Java Naming and Directory Interface (JNDI) functionality in its \"Console\" component. A remote attacker could leverage this functionality in order to load malicious classes into memory.\n\n**Note**: This is a different vulnerability than **CVE-2021-23221** (**BDSA-2022-0186**)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| h2 1.3.176  | 1.4.197  | 2.2.224 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/111d5e9e-3830-4ecb-844b-622537d88508?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=b84a5184-8627-4d38-b055-d92d33d97e35)\n\n\n## Description\nH2 Database is vulnerable to remote code execution (RCE) due to the inclusion of unsafe Java Naming and Directory Interface (JNDI) functionality in its \"Console\" component. A remote attacker could leverage this functionality in order to load malicious classes into memory.\n\n**Note**: This is a different vulnerability than **CVE-2021-23221** (**BDSA-2022-0186**).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2021-42392](https://openhub.net/vulnerabilities/bdsa/CVE-2021-42392) - Exposed Dangerous Method or Function\n\n\n\n## Solution\nFixed in version [**2.0.206**](https://github.com/h2database/h2database/releases/tag/version-2.0.206) by [this](https://github.com/h2database/h2database/commit/b24aa46f48904ce64443f8f4353d70a2eed09037) commit and [this](https://github.com/h2database/h2database/commit/4a2e677bfb6bfee59bff1ce1dfb6f28ce5109d8c) commit.\n\nThe latest stable releases can be found [here](https://github.com/h2database/h2database/releases).\n\n## Workaround\nThe vendor has stated [here](https://github.com/h2database/h2database/security/advisories/GHSA-h376-j262-vhq6) that the following workarounds can be used:\n\n\u003e H2 Console should never be available to untrusted users.\n\n\u003e -webAllowOthers is a dangerous setting that should be avoided.\n\n\u003e H2 Console Servlet deployed on a web server can be protected with a security constraint: https://h2database.com/html/tutorial.html#usingH2ConsoleServlet\n\u003e If `webAllowOthers` is specified, you need to uncomment and edit `\u003csecurity-role\u003e` and `\u003csecurity-constraint\u003e` as necessary. See documentation of your web server for more details.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "H2 Database is vulnerable to remote code execution (RCE) due to the inclusion of unsafe Java Naming and Directory Interface (JNDI) functionality in its \"Console\" component. A remote attacker could leverage this functionality in order to load malicious classes into memory.\n\n**Note**: This is a different vulnerability than **CVE-2021-23221** (**BDSA-2022-0186**)."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-23221 h2 1.3.176: com.h2database",
                            "shortDescription": {
                                "text": "Direct Dependency: h2 1.3.176 (CVE-2022-23221)"
                            },
                            "fullDescription": {
                                "text": "H2 Console (a component of H2 Database) is vulnerable to remote code execution (RCE) due to allowing custom classes to be loaded from remote servers through JNDI (Java Naming and Directory Interface). This can only be exploited if H2 Console has remote access configured and no protection methods are set.\n\n**Note**: This is a different vulnerability than **CVE-2021-42392** (**BDSA-2022-0048**)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| h2 1.3.176  | 1.4.197  | 2.2.224 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/111d5e9e-3830-4ecb-844b-622537d88508?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=b84a5184-8627-4d38-b055-d92d33d97e35)\n\n\n## Description\nH2 Console (a component of H2 Database) is vulnerable to remote code execution (RCE) due to allowing custom classes to be loaded from remote servers through JNDI (Java Naming and Directory Interface). This can only be exploited if H2 Console has remote access configured and no protection methods are set.\n\n**Note**: This is a different vulnerability than **CVE-2021-42392** (**BDSA-2022-0048**).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2022-23221](https://openhub.net/vulnerabilities/bdsa/CVE-2022-23221) - Eval Injection\n\n\n\n## Solution\nFixed in [**2.0.206**](https://github.com/h2database/h2database/releases/tag/version-2.0.206) by [this](https://github.com/h2database/h2database/commit/b24aa46f48904ce64443f8f4353d70a2eed09037) commit and [this](https://github.com/h2database/h2database/commit/4a2e677bfb6bfee59bff1ce1dfb6f28ce5109d8c) commit.\n\nThe latest stable releases are available [here](http://www.h2database.com/html/download.html).\n\n## Workaround\nThe vendor suggests not giving H2 Console access to untrusted users and avoiding `-webAllowOthers` setting.\n\nH2 Console Servlet deployed on a web server can also be protected with a [security constraint](https://h2database.com/html/tutorial.html#usingH2ConsoleServlet). If `webAllowOthers` is specified, you need to uncomment and edit `\u003csecurity-role\u003e` and `\u003csecurity-constraint\u003e` as necessary. See documentation of your web server for more details.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-95](https://cwe.mitre.org/data/definitions/95.html)\n\n",
                                "text": "H2 Console (a component of H2 Database) is vulnerable to remote code execution (RCE) due to allowing custom classes to be loaded from remote servers through JNDI (Java Naming and Directory Interface). This can only be exploited if H2 Console has remote access configured and no protection methods are set.\n\n**Note**: This is a different vulnerability than **CVE-2021-42392** (**BDSA-2022-0048**)."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-95"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-45868 h2 1.3.176: com.h2database",
                            "shortDescription": {
                                "text": "Direct Dependency: h2 1.3.176 (CVE-2022-45868)"
                            },
                            "fullDescription": {
                                "text": "h2database contains a vulnerability wherein a malicious local user could be able to gain the password for the H2 web admin console via the `webAdminPassword` argument by viewing the running processes. This could lead to privilege escalation.\n\n**Note:** the vendor has disputed the validity of this issue, stating: \"That “exploit” requires `ADMIN` privileges in the database, so it isn't a vulnerability by itself. Users with `ADMIN` privileges may do anything with your JVM and system by design. You should never give these privileges to untrusted users and applications.\". However, Synopsys CyRC cannot confirm the requirement for `ADMIN` privileges - it should be assumed that any low-privileged local user could list the running processes and view the password. In general, administrators are not supposed to pass sensitive information in command line parameters, therefore this potential issue is not considered as a vulnerability by the vendor."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| h2 1.3.176  | 1.4.197  | 2.2.224 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/111d5e9e-3830-4ecb-844b-622537d88508?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=b84a5184-8627-4d38-b055-d92d33d97e35)\n\n\n## Description\nh2database contains a vulnerability wherein a malicious local user could be able to gain the password for the H2 web admin console via the `webAdminPassword` argument by viewing the running processes. This could lead to privilege escalation.\n\n**Note:** the vendor has disputed the validity of this issue, stating: \"That “exploit” requires `ADMIN` privileges in the database, so it isn't a vulnerability by itself. Users with `ADMIN` privileges may do anything with your JVM and system by design. You should never give these privileges to untrusted users and applications.\". However, Synopsys CyRC cannot confirm the requirement for `ADMIN` privileges - it should be assumed that any low-privileged local user could list the running processes and view the password. In general, administrators are not supposed to pass sensitive information in command line parameters, therefore this potential issue is not considered as a vulnerability by the vendor.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-45868](https://openhub.net/vulnerabilities/bdsa/CVE-2022-45868) - Sensitive Data Exposure\n\n\n\n## Solution\nFixed in version [**2.2.220**](https://github.com/h2database/h2database/releases/tag/version-2.2.220) by [this](https://github.com/h2database/h2database/commit/581ed18ff9d6b3761d851620ed88a3994a351a0d) commit.\n\nThe latest stable releases can be found [here](https://github.com/h2database/h2database/releases).\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\n* Common Weakness Enumeration: [CWE-319](https://cwe.mitre.org/data/definitions/319.html)\n\n",
                                "text": "h2database contains a vulnerability wherein a malicious local user could be able to gain the password for the H2 web admin console via the `webAdminPassword` argument by viewing the running processes. This could lead to privilege escalation.\n\n**Note:** the vendor has disputed the validity of this issue, stating: \"That “exploit” requires `ADMIN` privileges in the database, so it isn't a vulnerability by itself. Users with `ADMIN` privileges may do anything with your JVM and system by design. You should never give these privileges to untrusted users and applications.\". However, Synopsys CyRC cannot confirm the requirement for `ADMIN` privileges - it should be assumed that any low-privileged local user could list the running processes and view the password. In general, administrators are not supposed to pass sensitive information in command line parameters, therefore this potential issue is not considered as a vulnerability by the vendor."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-200",
                                    "external/cwe/cwe-319"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-38749 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                            "shortDescription": {
                                "text": "Transitive Dependency: snakeyaml 1.27 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-38749)"
                            },
                            "fullDescription": {
                                "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.27  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/33699701-a988-4e1c-be03-a90f56a2457d?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7d5b8a95-2ae3-4f89-9b3b-d47c44f9d187)\n\n\n## Description\nSnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-38749](https://openhub.net/vulnerabilities/bdsa/CVE-2022-38749) - Stack-based Buffer Overflow\n\n\n\n## Solution\nFixed in [**1.31**](https://mvnrepository.com/artifact/org.yaml/snakeyaml/1.31) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/fc30078) commit.\n\nThe latest stable releases can be found [here](https://mvnrepository.com/artifact/org.yaml/snakeyaml).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.yaml:snakeyaml:1.27\n\n\n## References\n* Common Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\n\n",
                                "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-121"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-38750 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                            "shortDescription": {
                                "text": "Transitive Dependency: snakeyaml 1.27 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-38750)"
                            },
                            "fullDescription": {
                                "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.27  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/33699701-a988-4e1c-be03-a90f56a2457d?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7d5b8a95-2ae3-4f89-9b3b-d47c44f9d187)\n\n\n## Description\nSnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-38750](https://openhub.net/vulnerabilities/bdsa/CVE-2022-38750) - Stack-based Buffer Overflow\n\n\n\n## Solution\nFixed in [**1.31**](https://mvnrepository.com/artifact/org.yaml/snakeyaml/1.31) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/fc30078) commit.\n\nThe latest stable releases can be found [here](https://mvnrepository.com/artifact/org.yaml/snakeyaml).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.yaml:snakeyaml:1.27\n\n\n## References\n* Common Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\n\n",
                                "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-121"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-25857 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                            "shortDescription": {
                                "text": "Transitive Dependency: snakeyaml 1.27 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-25857)"
                            },
                            "fullDescription": {
                                "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.27  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/33699701-a988-4e1c-be03-a90f56a2457d?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7d5b8a95-2ae3-4f89-9b3b-d47c44f9d187)\n\n\n## Description\nSnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-25857](https://openhub.net/vulnerabilities/bdsa/CVE-2022-25857) - Uncontrolled Resource Consumption\n\n\n\n## Solution\nFixed in [**1.31**](https://mvnrepository.com/artifact/org.yaml/snakeyaml/1.31) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/fc30078) commit.\n\nThe latest stable releases can be found [here](https://mvnrepository.com/artifact/org.yaml/snakeyaml).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.yaml:snakeyaml:1.27\n\n\n## References\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n",
                                "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-400"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-38751 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                            "shortDescription": {
                                "text": "Transitive Dependency: snakeyaml 1.27 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-38751)"
                            },
                            "fullDescription": {
                                "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.27  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/33699701-a988-4e1c-be03-a90f56a2457d?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7d5b8a95-2ae3-4f89-9b3b-d47c44f9d187)\n\n\n## Description\nSnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-38751](https://openhub.net/vulnerabilities/bdsa/CVE-2022-38751) - Improper Handling of Values\n\n\n\n## Solution\nFixed in version [**1.31**](https://mvnrepository.com/artifact/org.yaml/snakeyaml/1.31) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/f3ab4e0f54c37ddb10f00b71d04187bb0ef1799c) commit and [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/6aedd33a811f7347c5dae2940e75940966f59466) commit.\n\nThe latest stable releases can be found [here](https://mvnrepository.com/artifact/org.yaml/snakeyaml).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.yaml:snakeyaml:1.27\n\n\n## References\n* Common Weakness Enumeration: [CWE-229](https://cwe.mitre.org/data/definitions/229.html)\n\n",
                                "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-229"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-38752 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                            "shortDescription": {
                                "text": "Transitive Dependency: snakeyaml 1.27 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-38752)"
                            },
                            "fullDescription": {
                                "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.27  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/33699701-a988-4e1c-be03-a90f56a2457d?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7d5b8a95-2ae3-4f89-9b3b-d47c44f9d187)\n\n\n## Description\nSnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-38752](https://openhub.net/vulnerabilities/bdsa/CVE-2022-38752) - Stack-based Buffer Overflow\n\n\n\n## Solution\nFixed in [**1.32**](https://bitbucket.org/snakeyaml/snakeyaml/downloads/?tab=tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.yaml:snakeyaml:1.27\n\n\n## References\n* Common Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\n* Common Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n",
                                "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-121",
                                    "external/cwe/cwe-674"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-41854 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                            "shortDescription": {
                                "text": "Transitive Dependency: snakeyaml 1.27 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-41854)"
                            },
                            "fullDescription": {
                                "text": "Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.27  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/33699701-a988-4e1c-be03-a90f56a2457d?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7d5b8a95-2ae3-4f89-9b3b-d47c44f9d187)\n\n\n## Description\nSnakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-41854](https://openhub.net/vulnerabilities/bdsa/CVE-2022-41854) - Stack-based Buffer Overflow\n\n\n\n## Solution\nFixed in version [**1.32**](https://bitbucket.org/snakeyaml/snakeyaml/downloads/?tab=tags) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/5ee00863a816f2a023d35a7512b5f742c9a36b5a) commit.\n\nThe latest stable releases can be found [here](https://bitbucket.org/snakeyaml/snakeyaml/downloads/?tab=tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.yaml:snakeyaml:1.27\n\n\n## References\n* Common Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\n\n",
                                "text": "Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-121"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-1471 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                            "shortDescription": {
                                "text": "Transitive Dependency: snakeyaml 1.27 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-1471)"
                            },
                            "fullDescription": {
                                "text": "SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.27  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/33699701-a988-4e1c-be03-a90f56a2457d?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=7d5b8a95-2ae3-4f89-9b3b-d47c44f9d187)\n\n\n## Description\nSnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2022-1471](https://openhub.net/vulnerabilities/bdsa/CVE-2022-1471) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in version [**2.0**](https://bitbucket.org/snakeyaml/snakeyaml/src/snakeyaml-2.0/) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/2b8d47c8bcfd402e7a682b7b2674e8d0cb25e522) commit.\n\nThe latest stable releases are available [here](https://bitbucket.org/snakeyaml/snakeyaml/downloads/?tab=tags).\n\n## Workaround\nThe `SafeConstructor()` class may be used instead of `Constructor()` while parsing untrusted content.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.yaml:snakeyaml:1.27\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-aop 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-aop:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.springframework.boot:spring-boot:2.4.5\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-jdbc 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-jdbc 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-jdbc 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-jdbc 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-jdbc 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-jdbc 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-jdbc 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.4.5\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 log4j-slf4j-impl 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                            "shortDescription": {
                                "text": "Transitive Dependency: log4j-slf4j-impl 2.13.3 from spring-boot-starter-log4j2 2.4.5 (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| log4j-slf4j-impl 2.13.3  | 2.22.1  | 2.22.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/ce2ecbf5-99b9-4ea2-a38d-0973f117ca7a?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=925f23a2-2f52-4adb-a1cc-637d8424dff2)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-log4j2:2.4.5\n        - org.apache.logging.log4j:log4j-slf4j-impl:2.13.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2020-36518 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                            "shortDescription": {
                                "text": "Transitive Dependency: jackson-databind 2.11.4 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2020-36518)"
                            },
                            "fullDescription": {
                                "text": "jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.11.4  | 2.16.1  | 2.16.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/0561efe8-ba25-4dc3-b0a3-b980bcf46f48?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ce7ad18a-6e02-4565-a51c-4fc2c5bc7c47)\n\n\n## Description\njackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2020-36518](https://openhub.net/vulnerabilities/bdsa/CVE-2020-36518) - Uncontrolled Resource Consumption\n\n\n\n## Solution\nFixed in [**2.13.2.2**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.2.2) by [this](https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b) commit, and in [**2.12.6.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.12.6.1) by [this](https://github.com/FasterXML/jackson-databind/commit/83b928dab9ba6ef81cf48987fcd12071e1ddb0c9) commit.\n\n**Note**: This was also fixed in [**2.13.2.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.2.1), however, the vendor has stated [here](https://github.com/FasterXML/jackson-databind/issues/2816#issue-678075273) that there is a problem in Gradle Module Metadata declaration. This lead to the release of **2.13.2.2**. If you are not using GMM you can use either update. \n\nThe latest stable releases are available [here](https://github.com/FasterXML/jackson-databind/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - com.fasterxml.jackson.core:jackson-databind:2.11.4\n\n\n## References\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n* Common Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n",
                                "text": "jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-400",
                                    "external/cwe/cwe-674"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-46877 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                            "shortDescription": {
                                "text": "Transitive Dependency: jackson-databind 2.11.4 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-46877)"
                            },
                            "fullDescription": {
                                "text": "jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.11.4  | 2.16.1  | 2.16.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/0561efe8-ba25-4dc3-b0a3-b980bcf46f48?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ce7ad18a-6e02-4565-a51c-4fc2c5bc7c47)\n\n\n## Description\njackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-46877](https://openhub.net/vulnerabilities/bdsa/CVE-2021-46877) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in [**2.12.6**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.12.6) and [**2.13.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.1) by [this](https://github.com/FasterXML/jackson-databind/commit/3ccde7d938fea547e598fdefe9a82cff37fed5cb) commit \n\nThe latest stable releases can be found [here](https://github.com/FasterXML/jackson-databind/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - com.fasterxml.jackson.core:jackson-databind:2.11.4\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-42003 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                            "shortDescription": {
                                "text": "Transitive Dependency: jackson-databind 2.11.4 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-42003)"
                            },
                            "fullDescription": {
                                "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.11.4  | 2.16.1  | 2.16.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/0561efe8-ba25-4dc3-b0a3-b980bcf46f48?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ce7ad18a-6e02-4565-a51c-4fc2c5bc7c47)\n\n\n## Description\nJackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-42003](https://openhub.net/vulnerabilities/bdsa/CVE-2022-42003) - Uncontrolled Resource Consumption\n\n\n\n## Solution\nFixed in versions:\n*  [**2.14.0-rc1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.14.0-rc1) by [this](https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33) commit,\n*  [**2.13.4.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.4.1) by [this](https://github.com/FasterXML/jackson-databind/commit/2c4a601c626f7790cad9d3c322d244e182838288) commit,\n*  [**2.12.7.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.12.7.1) by [this](https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea) commit.\n\nThe latest stable releases can be found [here](https://github.com/FasterXML/jackson-databind/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - com.fasterxml.jackson.core:jackson-databind:2.11.4\n\n\n## References\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n",
                                "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-400"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-42004 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                            "shortDescription": {
                                "text": "Transitive Dependency: jackson-databind 2.11.4 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-42004)"
                            },
                            "fullDescription": {
                                "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.11.4  | 2.16.1  | 2.16.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/0561efe8-ba25-4dc3-b0a3-b980bcf46f48?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ce7ad18a-6e02-4565-a51c-4fc2c5bc7c47)\n\n\n## Description\nJackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-42004](https://openhub.net/vulnerabilities/bdsa/CVE-2022-42004) - Uncontrolled Resource Consumption\n\n\n\n## Solution\nFixed in version [**2.13.4**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.4) by [this](https://github.com/FasterXML/jackson-databind/commit/063183589218fec19a9293ed2f17ec53ea80ba88) commit and in version [**2.12.7.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.12.7.1) by [this](https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea) commit.\n\nThe latest stable releases can be found [here](https://github.com/FasterXML/jackson-databind/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - com.fasterxml.jackson.core:jackson-databind:2.11.4\n\n\n## References\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n",
                                "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-400"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-35116 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                            "shortDescription": {
                                "text": "Transitive Dependency: jackson-databind 2.11.4 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-35116)"
                            },
                            "fullDescription": {
                                "text": "jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.11.4  | 2.16.1  | 2.16.1 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/0561efe8-ba25-4dc3-b0a3-b980bcf46f48?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ce7ad18a-6e02-4565-a51c-4fc2c5bc7c47)\n\n\n## Description\njackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-35116](https://openhub.net/vulnerabilities/bdsa/CVE-2023-35116) - Allocation of Resources Without Limits or Throttling\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - com.fasterxml.jackson.core:jackson-databind:2.11.4\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-context 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-context:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-aop 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-aop 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-aop 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-aop 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-aop 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-aop 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.4.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-boot-starter-aop 2.4.5 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.4.5\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/5213f921-c72e-4d06-9852-cdad49cdc465?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-tx 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-tx:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-22118 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22118)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22118](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22118) - Third-party component usage\n\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\n* Common Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n",
                                "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-264",
                                    "external/cwe/cwe-376"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22096 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22096)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22096](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22096) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-22060 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-22060)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-22060](https://openhub.net/vulnerabilities/bdsa/CVE-2021-22060) - Injection in Downstream Component\n\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n",
                                "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-74"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22950 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22950)"
                            },
                            "fullDescription": {
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22950](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22950) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2022-0847 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2022-0847)"
                            },
                            "fullDescription": {
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-22968 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22968)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-22968](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22968) - Weak Input Validation\n\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-22970 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22970)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22970](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22970) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22971 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-22971)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-22971](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22971) - Incorrect Provision of Specified Functionality\n\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-684"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20861 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20861)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20861](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20861) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-20860 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20860)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20860](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20860) - Improper Access Control\n\n\n\n## Solution\nFixed in [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/eafe3afe11) commit and in [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/202fa5cdb3) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-435](https://cwe.mitre.org/data/definitions/435.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-435"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20863 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-20863)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20863](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20863) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2016-1000027 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                            "shortDescription": {
                                "text": "Transitive Dependency: spring-core 5.3.6 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2016-1000027)"
                            },
                            "fullDescription": {
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.3.6  | 5.3.31-wso2v1  | 6.1.3 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/92239f56-7cb1-4671-8fc7-fbc8c4abfde7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=09f17d81-b282-43ec-9f2b-36c8021d3ca7)\n\n\n## Description\nPivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2016-1000027](https://openhub.net/vulnerabilities/bdsa/CVE-2016-1000027) - Insecure Object Deserialization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.data:spring-data-jpa:2.4.8\n            - org.springframework:spring-core:5.3.6\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3731 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-log4j2 2.4.5 (BDSA-2021-3731)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Insecure Object Deserialization\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2021-3817 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-log4j2 2.4.5 (BDSA-2021-3817)"
                            },
                            "fullDescription": {
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Loop with Unreachable Exit Condition ('Infinite Loop')\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2021-3887 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-log4j2 2.4.5 (BDSA-2021-3887)"
                            },
                            "fullDescription": {
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Weak Input Validation\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-22965 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-log4j2 2.4.5 (CVE-2022-22965)"
                            },
                            "fullDescription": {
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [CVE-2022-22965](https://openhub.net/vulnerabilities/bdsa/CVE-2022-22965) - Incomplete List of Disallowed Inputs\n\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n",
                                "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-749"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20873 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-log4j2 2.4.5 (CVE-2023-20873)"
                            },
                            "fullDescription": {
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-20873](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20873) - Improper Access Control\n\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n* Common Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n",
                                "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-284",
                                    "external/cwe/cwe-923"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-20883 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-log4j2 2.4.5 (CVE-2023-20883)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-20883](https://openhub.net/vulnerabilities/bdsa/CVE-2023-20883) - Insufficient Verification of Data Authenticity\n\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-345"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-34055 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                            "shortDescription": {
                                "text": "Direct Dependency: spring-boot-starter-log4j2 2.4.5 (CVE-2023-34055)"
                            },
                            "fullDescription": {
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-log4j2 2.4.5  | 2.7.18  | 3.2.2 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/9a05f25f-56d8-4758-b01f-ab66d3bc08bf?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=ee1b331d-05e0-4bd1-b6ef-727c3b98e324)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-34055](https://openhub.net/vulnerabilities/bdsa/CVE-2023-34055) - Third-party component usage\n\n\n\n## Solution\nFixed in:\n* [**3.1.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6)\n* [**3.0.13**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13)\n* [**2.7.18**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor notes the following:\n\u003e As a temporary workaround, Spring Boot users can choose to disable web metrics with the following property: `management.metrics.enable.http.server.requests=false`\n\n\n\n## References\n\n",
                                "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-30640 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-30640)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to bypass of `LockDown` realm protections via incorrect parameter escaping."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to bypass of `LockDown` realm protections via incorrect parameter escaping.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-30640](https://openhub.net/vulnerabilities/bdsa/CVE-2021-30640) - Improper Authentication\n\n\n\n## Solution\nFixed in:\n* [**10.0.6**](https://archive.apache.org/dist/tomcat/tomcat-10/v10.0.6/) by the following commits: \n\t* [Commit 1](https://github.com/apache/tomcat/commit/24dfb30076997b640e5123e92c4b8d7f206f609c)\n\t* [Commit 2](https://github.com/apache/tomcat/commit/0a272b00aed57526dbfc8b881ab253c23c61f100)\n\t* [Commit 3](https://github.com/apache/tomcat/commit/c9f21a2a7908c7c4ecd4f9bb495d3ee36a2bd822)\n\t* [Commit 4](hhttps://github.com/apache/tomcat/commit/4e86b4ea0d1a9b00fa93971c31b93ad1bd49c7fe)\n\t* [Commit 5](https://github.com/apache/tomcat/commit/79580e7f70a07c083be07307376511bb864d5a7b)\n\t* [Commit 6](https://github.com/apache/tomcat/commit/d3407672774e372fae8b5898d55f85d16f22b972)\n\t* [Commit 7](https://github.com/apache/tomcat/commit/6a9129ac9bd06555ce04bb564a76fc3987311f38)\n\t* [Commit 8](https://github.com/apache/tomcat/commit/ad22db641dcd61c2e8078f658fa709897b5da375)\n* [**9.0.46**](https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.46/)  by the following commits:\n\t* [Commit 1](https://github.com/apache/tomcat/commit/c4df8d44a959a937d507d15e5b1ca35c3dbc41eb)\n\t* [Commit 2](https://github.com/apache/tomcat/commit/749f3cc192c68c34f2375509aea087be45fc4434)\n\t* [Commit 3](https://github.com/apache/tomcat/commit/c6b6e1015ae44c936971b6bf8bce70987935b92e)\n\t* [Commit 4](https://github.com/apache/tomcat/commit/91ecdc61ce3420054c04114baaaf1c1e0cbd5d56)\n\t* [Commit 5](https://github.com/apache/tomcat/commit/e50067486cf86564175ca0cfdcbf7d209c6df862)\n\t* [Commit 6](https://github.com/apache/tomcat/commit/b5585a9e5d4fec020cc5ebadb82f899fae22bc43)\n\t* [Commit 7](https://github.com/apache/tomcat/commit/329932012d3a9b95fde0b18618416e659ecffdc0)\n\t* [Commit 8](https://github.com/apache/tomcat/commit/3ce84512ed8783577d9945df28da5a033465b945)\n* [**8.5.66**](https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.66/)  by the following commits:\n\t* [Commit 1](https://github.com/apache/tomcat/commit/f4d9bdef53ec009b7717620d890465fa273721a6)\n\t* [Commit 2](https://github.com/apache/tomcat/commit/4e61e1d625a4a64d6b775e3a03c77a0b100d56d7)\n\t* [Commit 3](https://github.com/apache/tomcat/commit/d5303a506c7533803d2b3bc46e6120ce673a6667)\n\t* [Commit 4](https://github.com/apache/tomcat/commit/b930d0b3161d9ec78d5fa57f886ed2de4680518b)\n\t* [Commit 5](https://github.com/apache/tomcat/commit/17208c645d68d2af1444ee8c64f36a9b8f0ba76f)\n\t* [Commit 6](https://github.com/apache/tomcat/commit/bd4d1fbe9146dff4714130594afd668406a6a5ef)\n\t* [Commit 7](https://github.com/apache/tomcat/commit/81f16b0a7186ed02efbfac336589d6cff28d1e89)\n\t* [Commit 8](https://github.com/apache/tomcat/commit/eeb7351219bd8803c0053e1e80444664a7cf5b51)\n* [**7.0.109**](https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.109/) by [this](https://github.com/apache/tomcat/commit/e21eb4764ccda55e5a35a5a7c19a6fd2b0757fe9) commit\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to bypass of `LockDown` realm protections via incorrect parameter escaping."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-287"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-33037 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-33037)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling via incorrect processing of `Transfer-Encoding` header."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to HTTP request smuggling via incorrect processing of `Transfer-Encoding` header.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-33037](https://openhub.net/vulnerabilities/bdsa/CVE-2021-33037) - HTTP Request Smuggling\n\n\n\n## Solution\nFixed in:\n* [**10.0.7**](https://archive.apache.org/dist/tomcat/tomcat-10/v10.0.7/) by the following commits: \n[Commit 1](https://github.com/apache/tomcat/commit/3202703e6d635e39b74262e81f0cb4bcbe2170dc)\n[Commit 2](https://github.com/apache/tomcat/commit/da0e7cb093cf68b052d9175e469dbd0464441b0b)\n[Commit 3](https://github.com/apache/tomcat/commit/8874fa02e9b36baa9ca6b226c0882c0190ca5a02)\n* [**9.0.48**](https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.48/)  by the following commits:\n[Commit 1](https://github.com/apache/tomcat/commit/45d70a86a901cbd534f8f570bed2aec9f7f7b88e)\n[Commit 2](https://github.com/apache/tomcat/commit/05f9e8b00f5d9251fcd3c95dcfd6cf84177f46c8)\n[Commit 3](https://github.com/apache/tomcat/commit/a2c3dc4c96168743ac0bab613709a5bbdaec41d0)\n* [**8.5.68**](https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.68/)  by the following commits:\n[Commit 1](https://github.com/apache/tomcat/commit/eee0d024c1b3171560c92eaba79dd6eb8eb11bcd)\n[Commit 2](https://github.com/apache/tomcat/commit/506134f957a4be2c5b4a9334f7b3435fc954dbc1)\n[Commit 3](https://github.com/apache/tomcat/commit/19d11556d0db99df291df33605f137976d152475)\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling via incorrect processing of `Transfer-Encoding` header."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-444"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-42340 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-42340)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to denial-of-service (DoS) due to a memory leak in the HTTP upgrade handler for `WebSocket` connections. The memory leak could use up the available memory resources which would prevent Tomcat from operating normally."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to denial-of-service (DoS) due to a memory leak in the HTTP upgrade handler for `WebSocket` connections. The memory leak could use up the available memory resources which would prevent Tomcat from operating normally.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2021-42340](https://openhub.net/vulnerabilities/bdsa/CVE-2021-42340) - Missing Release of Memory after Effective Lifetime\n\n\n\n## Solution\nFixed in:\n* **[8.5.72](https://github.com/apache/tomcat/releases/tag/8.5.72)** by [this](https://github.com/apache/tomcat/commit/d27535bdee) commit\n* **[9.0.54](https://github.com/apache/tomcat/releases/tag/9.0.54)** by [this](https://github.com/apache/tomcat/commit/80f1438ec4) commit\n* **[10.0.12](https://github.com/apache/tomcat/releases/tag/10.0.12)** by [this](https://github.com/apache/tomcat/commit/31d6242664) commit\n* **[10.1.0-m6](https://github.com/apache/tomcat/releases/tag/10.1.0-M6)** by [this](https://github.com/apache/tomcat/commit/d5a6660cba) commit\n\nThe latest stable releases can be found [here](https://tomcat.apache.org/download-10.cgi).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-401](https://cwe.mitre.org/data/definitions/401.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to denial-of-service (DoS) due to a memory leak in the HTTP upgrade handler for `WebSocket` connections. The memory leak could use up the available memory resources which would prevent Tomcat from operating normally."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-401"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-23181 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-23181)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat contains a TOCTOU vulnerability that was introduced when fixing CVE-2020-9484. This vulnerability allows a local attacker to perform actions with the privileges of the user that the Tomcat process is using. \n\n**Note**: This issue is only exploitable when Tomcat is configured to persist sessions using the `FileStore`."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat contains a TOCTOU vulnerability that was introduced when fixing CVE-2020-9484. This vulnerability allows a local attacker to perform actions with the privileges of the user that the Tomcat process is using. \n\n**Note**: This issue is only exploitable when Tomcat is configured to persist sessions using the `FileStore`.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-23181](https://openhub.net/vulnerabilities/bdsa/CVE-2022-23181) - Time-of-check Time-of-use (TOCTOU) Race Condition\n\n\n\n## Solution\nFixed in:\n* **[8.5.74](https://github.com/apache/tomcat/releases/tag/8.5.74)** by [this](https://github.com/apache/tomcat/commit/97943959ba) commit\n* **[9.0.57](https://github.com/apache/tomcat/releases/tag/9.0.57)** by [this](https://github.com/apache/tomcat/commit/1385c624b4) commit\n* **[10.0.15](https://github.com/apache/tomcat/releases/tag/10.0.15)** by [this](https://github.com/apache/tomcat/commit/094800b12d) commit\n* **[10.1.0-m10](https://github.com/apache/tomcat/releases/tag/10.1.0-M10)** by [this](https://github.com/apache/tomcat/commit/70da1aaa51) commit\n\nThe latest stable releases can be found [here](https://tomcat.apache.org/).\n\n**Note**: This issue was fixed in Apache Tomcat **10.1.0-M9**, **10.0.15**, **9.0.57** and **8.5.74** but the release vote for those release candidates did not pass.\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html)\n\n",
                                "text": "Apache Tomcat contains a TOCTOU vulnerability that was introduced when fixing CVE-2020-9484. This vulnerability allows a local attacker to perform actions with the privileges of the user that the Tomcat process is using. \n\n**Note**: This issue is only exploitable when Tomcat is configured to persist sessions using the `FileStore`."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-367"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-29885 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-29885)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat's documentation incorrectly states that `EncryptInterceptor` allows Tomcat clustering to run over untrusted networks. However, `EncryptInterceptor` only provides confidentiality and integrity protection, but does not prevent the possibility of denial-of-service (DoS) attacks."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat's documentation incorrectly states that `EncryptInterceptor` allows Tomcat clustering to run over untrusted networks. However, `EncryptInterceptor` only provides confidentiality and integrity protection, but does not prevent the possibility of denial-of-service (DoS) attacks.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2022-29885](https://openhub.net/vulnerabilities/bdsa/CVE-2022-29885) - Omission of Security-relevant Information\n\n\n\n## Solution\nFixed through documentation updates in:\n* [**10.1.0-M15**](https://github.com/apache/tomcat/releases/tag/10.1.0-M15) by [this](https://github.com/apache/tomcat/commit/0fa7721f11) commit, \n* [**10.0.21**](https://github.com/apache/tomcat/releases/tag/10.0.21) by [this](https://github.com/apache/tomcat/commit/36826ea638) commit,\n* [**9.0.63**](https://github.com/apache/tomcat/releases/tag/9.0.63) by [this](https://github.com/apache/tomcat/commit/eaafd28296) commit,\n* [**8.5.79**](https://github.com/apache/tomcat/releases/tag/8.5.79) by [this](https://github.com/apache/tomcat/commit/b679bc627f5a4ea6510af95adfb7476b07eba890) commit\nThe latest stable releases can be found [here](https://tomcat.apache.org/download-10.cgi).\n\n## Workaround\nThe vendor advises using the following mitigation:\n\u003e Users running clustering over an untrusted network who require full protection should switch to an alternative solution such as running the clustering communication over a VPN.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-223](https://cwe.mitre.org/data/definitions/223.html)\n\n",
                                "text": "Apache Tomcat's documentation incorrectly states that `EncryptInterceptor` allows Tomcat clustering to run over untrusted networks. However, `EncryptInterceptor` only provides confidentiality and integrity protection, but does not prevent the possibility of denial-of-service (DoS) attacks."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-223"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "CVE-2022-34305 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-34305)"
                            },
                            "fullDescription": {
                                "text": "The form authentication example in Apache Tomcat is vulnerable to cross-site scripting (XSS). If the code for this example form is used in production it could be exploited to steal user session tokens or perform actions on other users' behalf."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nThe form authentication example in Apache Tomcat is vulnerable to cross-site scripting (XSS). If the code for this example form is used in production it could be exploited to steal user session tokens or perform actions on other users' behalf.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2022-34305](https://openhub.net/vulnerabilities/bdsa/CVE-2022-34305) - Improper Neutralization of Script-Related HTML Tags in Web Pages\n\n\n\n## Solution\nFixed in:\n* [**8.5.82**](https://github.com/apache/tomcat/releases/tag/8.5.82)** by [this](https://github.com/apache/tomcat/commit/5f6c88b054) commit,\n* [**9.0.65**](https://github.com/apache/tomcat/releases/tag/9.0.65)** by [this](https://github.com/apache/tomcat/commit/8b60af90b9) commit,\n* [**10.0.23**](https://github.com/apache/tomcat/releases/tag/10.0.23)** by [this](https://github.com/apache/tomcat/commit/1a7e95d9c3) commit,\n* [**10.1.0-m17**](https://github.com/apache/tomcat/releases/tag/10.1.0-M17)  by [this](https://github.com/apache/tomcat/commit/d6251d1cfb) commit.\n\n## Workaround\nRemoving the examples web application and all of the Form authentication code used in production would mitigate the issue.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html)\n\n",
                                "text": "The form authentication example in Apache Tomcat is vulnerable to cross-site scripting (XSS). If the code for this example form is used in production it could be exploited to steal user session tokens or perform actions on other users' behalf."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-80"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2022-42252 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-42252)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat does not fully respect the intent of the `rejectIllegalHeader` configuration option to drop all requests with illegal headers. A remote attacker could potentially smuggle requests with a specially crafted `Content-Length` header when Tomcat is also behind a reverse proxy that does the same. \n\n**Note:** This vulnerability only manifests when `rejectIllegalHeader` is set to `false`, which is **not** the default setting for any version higher than the **8.5.x** series."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat does not fully respect the intent of the `rejectIllegalHeader` configuration option to drop all requests with illegal headers. A remote attacker could potentially smuggle requests with a specially crafted `Content-Length` header when Tomcat is also behind a reverse proxy that does the same. \n\n**Note:** This vulnerability only manifests when `rejectIllegalHeader` is set to `false`, which is **not** the default setting for any version higher than the **8.5.x** series.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-42252](https://openhub.net/vulnerabilities/bdsa/CVE-2022-42252) - HTTP Request Smuggling\n\n\n\n## Solution\nFixed in:\n* [**8.5.83**](https://github.com/apache/tomcat/releases/tag/8.5.83) by [this](https://github.com/apache/tomcat/commit/a1c07906d8) commit.\n* [**9.0.68**](https://github.com/apache/tomcat/releases/tag/9.0.68) by [this](https://github.com/apache/tomcat/commit/4c7f4fd09d) commit.\n* [**10.0.27**](https://github.com/apache/tomcat/releases/tag/10.0.27) by [this](https://github.com/apache/tomcat/commit/0d089a1504) commit.\n* [**10.1.1**](https://github.com/apache/tomcat/releases/tag/10.1.1) by [this](https://github.com/apache/tomcat/commit/c9fe754e5d) commit.\n\nThe latest versions are available [here](https://github.com/apache/tomcat/tags).\n\n## Workaround\nThe vendor advises the following to mitigate the issue:\n\u003e Ensure `rejectIllegalHeader` is set to true.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n",
                                "text": "Apache Tomcat does not fully respect the intent of the `rejectIllegalHeader` configuration option to drop all requests with illegal headers. A remote attacker could potentially smuggle requests with a specially crafted `Content-Length` header when Tomcat is also behind a reverse proxy that does the same. \n\n**Note:** This vulnerability only manifests when `rejectIllegalHeader` is set to `false`, which is **not** the default setting for any version higher than the **8.5.x** series."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-444"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-45143 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2022-45143)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat's `JsonErrorReportValve` module does not escape the `type`, `message` or `description` values. In cases where these values are constructed from user provided data it is possible for users to manipulate or invalidate the JSON output."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat's `JsonErrorReportValve` module does not escape the `type`, `message` or `description` values. In cases where these values are constructed from user provided data it is possible for users to manipulate or invalidate the JSON output.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2022-45143](https://openhub.net/vulnerabilities/bdsa/CVE-2022-45143) - Improper Neutralization of Escape, Meta, or Control Sequences\n\n\n\n## Solution\nFixed in:\n* [**8.5.84**](https://github.com/apache/tomcat/releases/tag/8.5.84) by [this](https://github.com/apache/tomcat/commit/0cab3a56bd) commit,\n* [**9.0.69**](https://github.com/apache/tomcat/releases/tag/9.0.69) by [this](https://github.com/apache/tomcat/commit/b336f4e588) commit,\n* [**10.1.2**](https://github.com/apache/tomcat/releases/tag/10.1.2) by [this](https://github.com/apache/tomcat/commit/1f50bff8da) commit,\n* [**11.0.0-M1**](https://github.com/apache/tomcat/releases/tag/11.0.0-M1) by [this](https://github.com/apache/tomcat/commit/6a0ac6a438) commit.\n\nThe latest stable releases can be found [here](https://tomcat.apache.org/download-10.cgi).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-150](https://cwe.mitre.org/data/definitions/150.html)\n\n",
                                "text": "Apache Tomcat's `JsonErrorReportValve` module does not escape the `type`, `message` or `description` values. In cases where these values are constructed from user provided data it is possible for users to manipulate or invalidate the JSON output."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-150"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2023-0357 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2023-0357)"
                            },
                            "fullDescription": {
                                "text": "Apache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability was not properly fixed in Apache Tomcat and required an additional disclosure as **CVE-2023-28709** (**BDSA-2023-1242**). The fix for Apache Commons FileUpload was not affected."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability was not properly fixed in Apache Tomcat and required an additional disclosure as **CVE-2023-28709** (**BDSA-2023-1242**). The fix for Apache Commons FileUpload was not affected.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0357](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0357) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in Apache Commons FileUpload  version [**1.5-RC1**](https://github.com/apache/commons-fileupload/releases/tag/commons-fileupload-1.5-RC1) by [this](https://github.com/apache/commons-fileupload/commit/e20c04990f7420ca917e96a84cec58b13a1b3d17) commit.\n\nThe latest stable releases of Apache Commons FileUpload can be found [here](https://github.com/apache/commons-fileupload/tags).\n\nHowever, it is stated that Apache Commons FileUpload does not enable any limits by default. Thus, after applying the fixing commit, the new configuration option `FileUploadBase#setFileCountMax` must be explicitly configured.\n\nFixed in Apache Tomcat:\n* [**8.5.88**](https://github.com/apache/tomcat/releases/tag/8.5.88) by [this](https://github.com/apache/tomcat/commit/5badf94e79) commit,\n* [**9.0.74**](https://github.com/apache/tomcat/releases/tag/9.0.74) by [this](https://github.com/apache/tomcat/commit/fbd8142162) commit,\n* [**10.1.8**](https://github.com/apache/tomcat/releases/tag/10.1.8) by [this](https://github.com/apache/tomcat/commit/ba848da71c) commit,\n* [**11.0.0-M5**](https://github.com/apache/tomcat/releases/tag/11.0.0-M5) by [this](https://github.com/apache/tomcat/commit/d53d8e7f77042cc32a3b98f589496a1ef5088e38) commit.\n\nThe latest stable releases of Apache Tomcat are available [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Apache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability was not properly fixed in Apache Tomcat and required an additional disclosure as **CVE-2023-28709** (**BDSA-2023-1242**). The fix for Apache Commons FileUpload was not affected."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-28708 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-28708)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to information disclosure due to a missing JSessionId secure attribute. Successful exploitation of this attack could result in an unauthenticated attacker being able to view the session cookie belonging to the user agent."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to information disclosure due to a missing JSessionId secure attribute. Successful exploitation of this attack could result in an unauthenticated attacker being able to view the session cookie belonging to the user agent.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-28708](https://openhub.net/vulnerabilities/bdsa/CVE-2023-28708) - Sensitive Data Exposure\n\n\n\n## Solution\nFixed in:\n* [**8.5.86**](https://github.com/apache/tomcat/releases/tag/8.5.86) by [this](https://github.com/apache/tomcat/commit/5b72c94e8b) commit,\n* [**9.0.72**](https://github.com/apache/tomcat/releases/tag/9.0.72) by [this](https://github.com/apache/tomcat/commit/3b51230764) commit,\n* [**10.1.6**](https://github.com/apache/tomcat/releases/tag/10.1.6) by [this](https://github.com/apache/tomcat/commit/f509bbf31f) commit,\n* [**11.0.0-M3**](https://github.com/apache/tomcat/releases/tag/11.0.0-M3) by [this](https://github.com/apache/tomcat/commit/c64d496) commit. \n\nThe latest stable releases can be found [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to information disclosure due to a missing JSessionId secure attribute. Successful exploitation of this attack could result in an unauthenticated attacker being able to view the session cookie belonging to the user agent."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-200"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2023-1242 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (BDSA-2023-1242)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat does not sufficiently limit the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability exists due to an incomplete fix for **CVE-2023-24998** (**BDSA-2023-0357**) in Apache Tomcat.\n\n**Note:** The vendor has stated that this vulnerability exists if non-default HTTP connector settings are used such that the `maxParameterCount` could be reached using query string parameters."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat does not sufficiently limit the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability exists due to an incomplete fix for **CVE-2023-24998** (**BDSA-2023-0357**) in Apache Tomcat.\n\n**Note:** The vendor has stated that this vulnerability exists if non-default HTTP connector settings are used such that the `maxParameterCount` could be reached using query string parameters.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1242](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1242) - Allocation of Resources Without Limits or Throttling\n\n\n\n## Solution\nFixed in:\n* [**8.5.88**](https://github.com/apache/tomcat/releases/tag/8.5.88) by [this](https://github.com/apache/tomcat/commit/5badf94e79) commit,\n* [**9.0.74**](https://github.com/apache/tomcat/releases/tag/9.0.74) by [this](https://github.com/apache/tomcat/commit/fbd8142162) commit,\n* [**10.1.8**](https://github.com/apache/tomcat/releases/tag/10.1.8) by [this](https://github.com/apache/tomcat/commit/ba848da71c) commit,\n* [**11.0.0-M5**](https://github.com/apache/tomcat/releases/tag/11.0.0-M5) by [this](https://github.com/apache/tomcat/commit/d53d8e7) commit.\n\nThe latest stable releases are available [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n",
                                "text": "Apache Tomcat does not sufficiently limit the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability exists due to an incomplete fix for **CVE-2023-24998** (**BDSA-2023-0357**) in Apache Tomcat.\n\n**Note:** The vendor has stated that this vulnerability exists if non-default HTTP connector settings are used such that the `maxParameterCount` could be reached using query string parameters."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-770"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-41080 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-41080)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to open redirects because of insufficient input validation. This vulnerability affects ROOT (default) web applications that have been configured to use `FORM` authentication feature. It can allow an attacker to trick a victim into accessing a specially crafted URL that redirects to an attacker-controlled location.\n\n**Note:** The scope of this vulnerability is limited to the ROOT (default) web application."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to open redirects because of insufficient input validation. This vulnerability affects ROOT (default) web applications that have been configured to use `FORM` authentication feature. It can allow an attacker to trick a victim into accessing a specially crafted URL that redirects to an attacker-controlled location.\n\n**Note:** The scope of this vulnerability is limited to the ROOT (default) web application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-41080](https://openhub.net/vulnerabilities/bdsa/CVE-2023-41080) - Open URL Redirect\n\n\n\n## Solution\nFixed in:\n* **[8.5.93](https://github.com/apache/tomcat/releases/tag/8.5.93)** by [this](https://github.com/apache/tomcat/commit/4998ad745b67edeadefe541c94ed029b53933d3b) commit,\n* **[9.0.80](https://github.com/apache/tomcat/releases/tag/9.0.80)** by [this](https://github.com/apache/tomcat/commit/77c0ce2d169efa248b64b992e547aad549ec906b) commit,\n* **[10.1.13](https://github.com/apache/tomcat/releases/tag/10.1.13)** by [this](https://github.com/apache/tomcat/commit/bb4624a9f3e69d495182ebfa68d7983076407a27) commit,\n* **[11.0.0-M11](https://github.com/apache/tomcat/releases/tag/11.0.0-M11)** by [this](https://github.com/apache/tomcat/commit/e3703c9abb8fe0d5602f6ba8a8f11d4b6940815a) commit.\n\nThe latest stable releases can be found [here](https://tomcat.apache.org/download-11.cgi).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to open redirects because of insufficient input validation. This vulnerability affects ROOT (default) web applications that have been configured to use `FORM` authentication feature. It can allow an attacker to trick a victim into accessing a specially crafted URL that redirects to an attacker-controlled location.\n\n**Note:** The scope of this vulnerability is limited to the ROOT (default) web application."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-601"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-45648 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-45648)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling due to improper parsing of HTTP trailer within the header. An attacker could exploit this vulnerability by supplying a specially crafted HTTP request containing invalid trailer field names or values from a reversed proxy, in order to bypass security access controls such as a web application firewall (WAF) or an intrusion detection system (IDS)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to HTTP request smuggling due to improper parsing of HTTP trailer within the header. An attacker could exploit this vulnerability by supplying a specially crafted HTTP request containing invalid trailer field names or values from a reversed proxy, in order to bypass security access controls such as a web application firewall (WAF) or an intrusion detection system (IDS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-45648](https://openhub.net/vulnerabilities/bdsa/CVE-2023-45648) - Weak Input Validation\n\n\n\n## Solution\nFixed in:\n* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/c83fe47725) commit,\n* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/5958324563) commit,\n* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/8ecff30650) commit,\n* [**11.0.0-m12**](https://github.com/apache/tomcat/releases/tag/11.0.0-m12) by [this](https://github.com/apache/tomcat/commit/eb5c094e5560764cda436362254997511a3ca1f6) commit.\n\nThe latest stable releases can be found [here](https://github.com/apache/tomcat/releases).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n* Common Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling due to improper parsing of HTTP trailer within the header. An attacker could exploit this vulnerability by supplying a specially crafted HTTP request containing invalid trailer field names or values from a reversed proxy, in order to bypass security access controls such as a web application firewall (WAF) or an intrusion detection system (IDS)."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20",
                                    "external/cwe/cwe-444"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-44487 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-44487)"
                            },
                            "fullDescription": {
                                "text": "The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-44487](https://openhub.net/vulnerabilities/bdsa/CVE-2023-44487) - Uncontrolled Resource Consumption\n\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX [**1.25.3**](https://hg.nginx.org/nginx/rev/release-1.25.3) by [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3-rc0**](https://github.com/apache/trafficserver/releases/tag/9.2.3-rc0) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9-rc0**](https://github.com/apache/trafficserver/releases/tag/8.1.9-rc0) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd [**1.4.73**](https://github.com/lighttpd/lighttpd1.4/releases/tag/lighttpd-1.4.73) by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit,\n * h2o fixed in the **master** branch by [this](https://github.com/h2o/h2o/commit/28fe15117b909588bf14269a0e1c6ec4548579fe) commit which is not yet included in any release.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n",
                                "text": "The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-400"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2023-42795 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-42795)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat contains an information exposure vulnerability due to insufficient error handling within the internal object recycling method. An attacker could exploit this issue to gain unauthorized access to sensitive information contained within the request/response when an error occurs in recycling."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat contains an information exposure vulnerability due to insufficient error handling within the internal object recycling method. An attacker could exploit this issue to gain unauthorized access to sensitive information contained within the request/response when an error occurs in recycling.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [CVE-2023-42795](https://openhub.net/vulnerabilities/bdsa/CVE-2023-42795) - Sensitive Data Exposure\n\n\n\n## Solution\nFixed in:\n* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/30f8063d7a) commit,\n* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/44d05d75d6) commit,\n* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/9375d67106) commit,\n* [**11.0.0-m12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/d6db22e411307c97ddf78315c15d5889356eca38) commit. \n\nThe latest stable releases can be found [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\n* Common Weakness Enumeration: [CWE-459](https://cwe.mitre.org/data/definitions/459.html)\n\n",
                                "text": "Apache Tomcat contains an information exposure vulnerability due to insufficient error handling within the internal object recycling method. An attacker could exploit this issue to gain unauthorized access to sensitive information contained within the request/response when an error occurs in recycling."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-200",
                                    "external/cwe/cwe-459"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2023-46589 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2023-46589)"
                            },
                            "fullDescription": {
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling when used behind a reverse proxy. This allows a remote attacker to append additional HTTP request onto valid HTTP requests and can be used to bypass validation, access restricted data, or perform actions on behalf of another user or group."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nApache Tomcat is vulnerable to HTTP request smuggling when used behind a reverse proxy. This allows a remote attacker to append additional HTTP request onto valid HTTP requests and can be used to bypass validation, access restricted data, or perform actions on behalf of another user or group.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-46589](https://openhub.net/vulnerabilities/bdsa/CVE-2023-46589) - HTTP Request Smuggling\n\n\n\n## Solution\nFixed in versions:\n\n* [**8.5.96**](https://github.com/apache/tomcat/releases/tag/8.5.96) by [this](https://github.com/apache/tomcat/commit/aa92971e879a519384c517febc39fd04c48d4642) commit.\n* [**9.0.83**](https://github.com/apache/tomcat/releases/tag/9.0.83) by [this](https://github.com/apache/tomcat/commit/7a2d8818fcea0b51747a67af9510ce7977245ebd) commit.\n* [**10.1.16**](https://github.com/apache/tomcat/releases/tag/10.1.16) by [this](https://github.com/apache/tomcat/commit/b5776d769bffeade865061bc8ecbeb2b56167b08) commit.\n* [**11.0.0-M11**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/6f181e1062a472bc5f0234980f66cbde42c1041b) commit.\n\nThe latest stable releases can be found [here](https://github.com/apache/tomcat/tags).\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n",
                                "text": "Apache Tomcat is vulnerable to HTTP request smuggling when used behind a reverse proxy. This allows a remote attacker to append additional HTTP request onto valid HTTP requests and can be used to bypass validation, access restricted data, or perform actions on behalf of another user or group."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-444"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-43980 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                            "shortDescription": {
                                "text": "Transitive Dependency: tomcat-embed-websocket 9.0.45 from spring-boot-starter-data-jpa 2.3.1.RELEASE (CVE-2021-43980)"
                            },
                            "fullDescription": {
                                "text": "The simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.3.1.RELEASE  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| tomcat-embed-websocket 9.0.45  | 9.0.85  | 10.1.18 |\n\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/components/90bf3328-3349-40ab-81b5-b2abfdac30cb?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026component=5a7e1c49-9a98-4393-b4e0-8011122bbe2f)\n\n\n## Description\nThe simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [CVE-2021-43980](https://openhub.net/vulnerabilities/bdsa/CVE-2021-43980) - Race Condition due to Improper Synchronization\n\n\n\n\n\n\n\n## Dependency tree\n- vulnerable-app-gradle:unspecified:-gradle\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE\n        - org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE\n            - org.apache.tomcat.embed:tomcat-embed-websocket:9.0.45\n\n\n## References\n* Common Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n",
                                "text": "The simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-362"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "path_manipulation|java",
                            "shortDescription": {
                                "text": "Directory Traversal"
                            },
                            "fullDescription": {
                                "text": "A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                            },
                            "help": {
                                "markdown": "\n## Description\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier).\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/ACE3044AB39D2AE61614C5185033A65E?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\n## Local Effect\n\nAn attacker may access, modify, or corrupt files that contain sensitive information or are critical to the application.\n\n\n## Remediation\nTo protect against directory traversal the application should enforce strict access controls and validate user input used to create pathnames or create indirect object references for file access. The application should also configure access to the file system on a least privilege basis to reduce the potential impact of attacks.\n\nWhenever possible, the application must restrict the use of user-supplied file paths.  When such paths are required for the application to function properly, indirect object references should be used for file access instead of accepting paths from the user. For example, consider an application that allows its users to specify a file to download from a directory. Instead of using a user-supplied filename to access the file, the application should maintain a mapping from integer keys to file names, ensuring that the supplied value is both an integer and corresponds to an actual file. In the case that a value does not have a corresponding file, the application should return a generic error message. This will often provide a safer way of referencing files that exist in the application than trying to check user input for malicious path manipulation.",
                                "text": "A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-22"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "xml_external_entity:unrestricted_dtds|java",
                            "shortDescription": {
                                "text": "Improper Control of Document Type Definition"
                            },
                            "fullDescription": {
                                "text": "Passing tainted input data with possibly arbitrary DTDs to a weakly configured XML parser."
                            },
                            "help": {
                                "markdown": "\n## Description\nPassing tainted input data with possibly arbitrary DTDs to a weakly configured XML parser.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/682A37E0956A83F4CA758EC5963D71E9?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Control+of+Document+Type+Definition%26context%3AtoolType%3Dsast)\n\n## Local Effect\n\nAn attacker-controlled DTD can be used to specify an external URL, making the impact of processing the DTD analogous to a server-side request forgery. Processing an arbitrary DTD may also result in parsing a large number of entities, causing denial of service.\n\n\n## Remediation\nUnspecified remediation.",
                                "text": "Passing tainted input data with possibly arbitrary DTDs to a weakly configured XML parser."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-827"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "null_pointer_dereference_exception:constant_null|java",
                            "shortDescription": {
                                "text": "Bad Use Of Null-like Value"
                            },
                            "fullDescription": {
                                "text": "Dereference of an explicit null value"
                            },
                            "help": {
                                "markdown": "\n## Description\nDereference of an explicit null value\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/D4404DB4D403235A9D116E5A532E7164?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DBad+Use+Of+Null-like+Value%26context%3AtoolType%3Dsast)\n\n## Local Effect\n\nA null pointer exception will occur.\n\n\n## Remediation\n",
                                "text": "Dereference of an explicit null value"
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-476"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "FB.DM_DEFAULT_ENCODING|java",
                            "shortDescription": {
                                "text": "Dm: Dubious method used"
                            },
                            "fullDescription": {
                                "text": "Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DM_DEFAULT_ENCODING\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "help": {
                                "markdown": "\n## Description\nFound a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DM_DEFAULT_ENCODING\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/31E2EA6F6CA3DF1561A2612FBEF58166?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDm%3A+Dubious+method+used%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nUnspecified remediation.",
                                "text": "Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DM_DEFAULT_ENCODING\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.xml_external_entity_enabled:documentbuilder_saxparser|java",
                            "shortDescription": {
                                "text": "XML External Entity (XXE) Injection"
                            },
                            "fullDescription": {
                                "text": "Java API for XML processing's `DocumentBuilderFactory` or `SAXParserFactory` class has not been configured to prevent expansion of external entities during XML parsing. External entity expansion may cause a server-side request forgery, denial of service, exposure of sensitive data or unwanted server requests. "
                            },
                            "help": {
                                "markdown": "\n## Description\nJava API for XML processing's `DocumentBuilderFactory` or `SAXParserFactory` class has not been configured to prevent expansion of external entities during XML parsing. External entity expansion may cause a server-side request forgery, denial of service, exposure of sensitive data or unwanted server requests. \n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/0A99461C97319387CBA5DEE7621F93F7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DXML+External+Entity+%28XXE%29+Injection%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nDisable the use of DTDs in XML parsers where the document source crosses a trust boundary. Very few applications have a business requirement to accept DTDs in XML documents supplied by end-users or external systems.\n\nIf DTD support can't be disabled completely due to business requirements, configure your XML parser to disable resolution of external entities. In addition, set an XML entity expansion limit to prevent a denial of service attack from exponential entity expansions.",
                                "text": "Java API for XML processing's `DocumentBuilderFactory` or `SAXParserFactory` class has not been configured to prevent expansion of external entities during XML parsing. External entity expansion may cause a server-side request forgery, denial of service, exposure of sensitive data or unwanted server requests. "
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-611"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.least_privilege_violation:docker_compose|text",
                            "shortDescription": {
                                "text": "Improper Access Control"
                            },
                            "fullDescription": {
                                "text": "The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/1EB5863866051B5A62CCB9E6BACC935B?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Access+Control%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                                "text": "The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-284"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.reverse_tabnabbing:html|html",
                            "shortDescription": {
                                "text": "Insecure Link Target"
                            },
                            "fullDescription": {
                                "text": "The application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/36E65F2AE814E937B02603083363BBC2?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInsecure+Link+Target%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nTo prevent untrusted pages linked from the application from being able to manipulate the \"window.opener\" object, set the attribute rel=\"noopener noreferrer\" for each HTML link to external sites. In addition to preventing reverse tabnabbing attacks, it may also improve browser performance as the new page can be run in a separate process.\n\nWhen the rel attribute is set to \"noopener\", the \"window.opener\" object is \"null\" on the new page. Therefore, the attacker cannot manipulate the navigation of the original page.  Additionally, the \"noreferrer\" attribute tells the browser to not include referrer information when the new page is requested.\n\nFor links opened with JavaScript, add the values \"noopener\", \"noreferrer\" as the \"windowFeatures\" parameter in the \"window.open()\" function:\n```\nvar childWindow = window.open(url, name, \"noopener,noreferrer\");   \n```\nFor legacy browser support, you can also manually set the opener to \"null\":\n```\nchildWindow.opener = null;  \n```\n\n**Note**: The rel=\"noopener\" attribute setting is supported by most modern browsers such as Firefox, Chrome, Edge and Safari but is not supported by legacy browsers such as Internet Explorer. For the latest information on browser support, refer to https://caniuse.com/#search=rel.",
                                "text": "The application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-1022"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.unspecified_software_version:docker_compose|text",
                            "shortDescription": {
                                "text": "Inclusion of Functionality from Untrusted Control Sphere"
                            },
                            "fullDescription": {
                                "text": "The Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/B58714EC190333C044DF0A1208BDB56B?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInclusion+of+Functionality+from+Untrusted+Control+Sphere%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n  2. When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\n  3. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n  4. Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n\n  5. Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n  6. Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\n  7. Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\n\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\n\n  8. Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n\nMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\n\n  9. Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                                "text": "The Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-829"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.hardcoded_secret:pattern|text",
                            "shortDescription": {
                                "text": "Use of Hard-coded Credentials"
                            },
                            "fullDescription": {
                                "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                            },
                            "help": {
                                "markdown": "\n## Description\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/3CACE50C4DEEED42BF4484F054D104F4?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUse+of+Hard-coded+Credentials%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.",
                                "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-798"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.container_privilege_escalation_allowed:docker_compose|text",
                            "shortDescription": {
                                "text": "Improper Privilege Management"
                            },
                            "fullDescription": {
                                "text": "The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/FF8184D6E30CF0C34DC910A02CD12492?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                                "text": "The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-269"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "unlogged_security_exception|java",
                            "shortDescription": {
                                "text": "Insufficient Logging"
                            },
                            "fullDescription": {
                                "text": "A security exception is caught but not logged."
                            },
                            "help": {
                                "markdown": "\n## Description\nA security exception is caught but not logged.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/787E14B63F4760FA1AE16CDA24A35AFF?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInsufficient+Logging%26context%3AtoolType%3Dsast)\n\n## Local Effect\n\nEach security exception must be logged properly to provide a notification about and a history of security events. This aids in a timely response to limit the severity and scale of attacks. It also provides information to analyze their origins and consequences.\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Use a centralized logging mechanism that supports multiple levels of detail. Ensure that all security-related successes and failures can be logged.\n  2. Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems.",
                                "text": "A security exception is caught but not logged."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-778"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "FB.EQ_COMPARETO_USE_OBJECT_EQUALS|java",
                            "shortDescription": {
                                "text": "Comparison of Object References Instead of Object Contents"
                            },
                            "fullDescription": {
                                "text": "This class defines a \u003ccode\u003ecompareTo(...)\u003c/code\u003e method but inherits its \u003ccode\u003eequals()\u003c/code\u003e method from \u003ccode\u003ejava.lang.Object\u003c/code\u003e. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.EQ_COMPARETO_USE_OBJECT_EQUALS\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "help": {
                                "markdown": "\n## Description\nThis class defines a \u003ccode\u003ecompareTo(...)\u003c/code\u003e method but inherits its \u003ccode\u003eequals()\u003c/code\u003e method from \u003ccode\u003ejava.lang.Object\u003c/code\u003e. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.EQ_COMPARETO_USE_OBJECT_EQUALS\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/48F978F52135114FACA539F051B5E2D7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DComparison+of+Object+References+Instead+of+Object+Contents%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.",
                                "text": "This class defines a \u003ccode\u003ecompareTo(...)\u003c/code\u003e method but inherits its \u003ccode\u003eequals()\u003c/code\u003e method from \u003ccode\u003ejava.lang.Object\u003c/code\u003e. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.EQ_COMPARETO_USE_OBJECT_EQUALS\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-595"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "FB.BC_IMPOSSIBLE_CAST|java",
                            "shortDescription": {
                                "text": "Expression is Always False"
                            },
                            "fullDescription": {
                                "text": "This cast will always throw a ClassCastException. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.BC_IMPOSSIBLE_CAST\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "help": {
                                "markdown": "\n## Description\nThis cast will always throw a ClassCastException. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.BC_IMPOSSIBLE_CAST\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/0829752C8EF2DD090760AC5602CA92BC?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DExpression+is+Always+False%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Use Static Analysis tools to spot such conditions.",
                                "text": "This cast will always throw a ClassCastException. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.BC_IMPOSSIBLE_CAST\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-570"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "resource_leak|java",
                            "shortDescription": {
                                "text": "Improper Resource Shutdown or Release"
                            },
                            "fullDescription": {
                                "text": "Leak of a system resource"
                            },
                            "help": {
                                "markdown": "\n## Description\nLeak of a system resource\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/695887B96D4701B939B98E28B90B125C?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Resource+Shutdown+or+Release%26context%3AtoolType%3Dsast)\n\n## Local Effect\n\nThe system resource will not be reclaimed and reused, reducing the future availability of the resource.\n\n\n## Remediation\nThe application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes.",
                                "text": "Leak of a system resource"
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-404"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "hardcoded_credentials:password|java",
                            "shortDescription": {
                                "text": "Use of Hard-coded Password"
                            },
                            "fullDescription": {
                                "text": "A password is stored directly in the source code."
                            },
                            "help": {
                                "markdown": "\n## Description\nA password is stored directly in the source code.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/D4633D762E304EE6B6F24D32FBC7105A?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUse+of+Hard-coded+Password%26context%3AtoolType%3Dsast)\n\n## Local Effect\n\nUsers with access to this source code can use this password to access production services or data.  Changing this password requires changing the code and re-deploying the application.\n\n\n## Remediation\nPotential mitigations include the following:\n  1. For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.\n  2. For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.\n  3. Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.\n\nUse randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\nThe first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n\nNext, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n\nFinally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.",
                                "text": "A password is stored directly in the source code."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-259"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "sigma.container_filesystem_write:docker_compose|text",
                            "shortDescription": {
                                "text": "Files or Directories Accessible to External Parties"
                            },
                            "fullDescription": {
                                "text": "The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/2968855D0FC1D44C7E27931F92523235?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DFiles+or+Directories+Accessible+to+External+Parties%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nUnspecified remediation.",
                                "text": "The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-552"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.container_requesting_net_raw:docker_compose|text",
                            "shortDescription": {
                                "text": "Improper Privilege Management"
                            },
                            "fullDescription": {
                                "text": "The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/3CE7E47FE0D765A81D20266354DCBB8F?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                                "text": "The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-269"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "FB.DMI_HARDCODED_ABSOLUTE_FILENAME|java",
                            "shortDescription": {
                                "text": "Expected Behavior Violation"
                            },
                            "fullDescription": {
                                "text": "This code constructs a File object using a hard coded to an absolute pathname (e.g., \u003ccode\u003enew File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");\u003c/code\u003e (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DMI_HARDCODED_ABSOLUTE_FILENAME\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "help": {
                                "markdown": "\n## Description\nThis code constructs a File object using a hard coded to an absolute pathname (e.g., \u003ccode\u003enew File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");\u003c/code\u003e (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DMI_HARDCODED_ABSOLUTE_FILENAME\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/711D18767A8BC1077668030AC93DD04F?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DExpected+Behavior+Violation%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nUnspecified remediation.",
                                "text": "This code constructs a File object using a hard coded to an absolute pathname (e.g., \u003ccode\u003enew File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");\u003c/code\u003e (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DMI_HARDCODED_ABSOLUTE_FILENAME\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-440"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.verbose_server_banner:express|javascript",
                            "shortDescription": {
                                "text": "Insertion of Sensitive Information Into Sent Data"
                            },
                            "fullDescription": {
                                "text": "HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."
                            },
                            "help": {
                                "markdown": "\n## Description\nHTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits.\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/E58D5BD05BB11A451751802EF3D2A774?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInsertion+of+Sensitive+Information+Into+Sent+Data%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.\n  2. Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n  3. Setup default error messages so that unexpected errors do not disclose sensitive information.\n  4. Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                                "text": "HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-201"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "null_pointer_dereference_exception:return_value|java",
                            "shortDescription": {
                                "text": "NULL Pointer Dereference"
                            },
                            "fullDescription": {
                                "text": "Return value of function which returns null is dereferenced without checking"
                            },
                            "help": {
                                "markdown": "\n## Description\nReturn value of function which returns null is dereferenced without checking\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/D4C6D97BC807DF13C3C5D0F050B75AD1?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DNULL+Pointer+Dereference%26context%3AtoolType%3Dsast)\n\n## Local Effect\n\nIf the function actually returns a null value, a NullPointerException will be thrown.\n\n\n## Remediation\nPotential mitigations include the following:\n  1. If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\n  2. The choice could be made to use a language that is not susceptible to these issues.\n  3. Check the results of all functions that return a value and verify that the value is non-null before acting upon it.\n  4. Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.\n  5. Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n  6. Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                                "text": "Return value of function which returns null is dereferenced without checking"
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-476"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "FB.URF_UNREAD_FIELD|java",
                            "shortDescription": {
                                "text": "UrF: Unread field"
                            },
                            "fullDescription": {
                                "text": "This field is never read. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.URF_UNREAD_FIELD\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "help": {
                                "markdown": "\n## Description\nThis field is never read. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.URF_UNREAD_FIELD\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)\n\n[Click Here To See More Details in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/CAEA2D5A16D4553926223DD112C1A614?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUrF%3A+Unread+field%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nUnspecified remediation.",
                                "text": "This field is never read. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.URF_UNREAD_FIELD\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        }
                    ]
                }
            },
            "results": [
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to bypass of `LockDown` realm protections via incorrect parameter escaping."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-30640 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "865251407c9348c4688a3b0134735525091d3bdc91e18e82a095ae19d3bc1517"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to HTTP request smuggling via incorrect processing of `Transfer-Encoding` header."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-33037 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "26209670ae9ec7caf8e57e8580092e8a035149af93af8df64e69f25cdeae8a05"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to denial-of-service (DoS) due to a memory leak in the HTTP upgrade handler for `WebSocket` connections. The memory leak could use up the available memory resources which would prevent Tomcat from operating normally."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-42340 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "91aa136da8ac9552924c408d8f706b1f45ce9d1f9c4b7e04ad343b7847d066e4"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat contains a TOCTOU vulnerability that was introduced when fixing CVE-2020-9484. This vulnerability allows a local attacker to perform actions with the privileges of the user that the Tomcat process is using. \n\n**Note**: This issue is only exploitable when Tomcat is configured to persist sessions using the `FileStore`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-23181 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "9438a301ffa6537116df916ed6a72b514f32a7a54d540ad42dacc45ba8d19185"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat's documentation incorrectly states that `EncryptInterceptor` allows Tomcat clustering to run over untrusted networks. However, `EncryptInterceptor` only provides confidentiality and integrity protection, but does not prevent the possibility of denial-of-service (DoS) attacks."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-29885 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "79e188081fdba4ac0e8548695f4f5c3dbdd4466a10d85a3150ead7e18836df71"
                    }
                },
                {
                    "message": {
                        "text": "The form authentication example in Apache Tomcat is vulnerable to cross-site scripting (XSS). If the code for this example form is used in production it could be exploited to steal user session tokens or perform actions on other users' behalf."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-34305 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d9823cd6941f0fde8e30c2c7ad504ca9d2ed938be1f51cb99d88007daa76e9fd"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat does not fully respect the intent of the `rejectIllegalHeader` configuration option to drop all requests with illegal headers. A remote attacker could potentially smuggle requests with a specially crafted `Content-Length` header when Tomcat is also behind a reverse proxy that does the same. \n\n**Note:** This vulnerability only manifests when `rejectIllegalHeader` is set to `false`, which is **not** the default setting for any version higher than the **8.5.x** series."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-42252 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1859e7f9d184057abbbda89080af4e725b97c97ce622d1702119cfcd815d19f3"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat's `JsonErrorReportValve` module does not escape the `type`, `message` or `description` values. In cases where these values are constructed from user provided data it is possible for users to manipulate or invalidate the JSON output."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-45143 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4fb0ef4badd8feb016932ba120895c35cbc401320801b6449ccf28165e35db54"
                    }
                },
                {
                    "message": {
                        "text": "Apache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability was not properly fixed in Apache Tomcat and required an additional disclosure as **CVE-2023-28709** (**BDSA-2023-1242**). The fix for Apache Commons FileUpload was not affected."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2023-0357 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e9b4ce09cba54012fecb14c90a08e384763f7d9cfa5c6b645eb455884b7f8252"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to information disclosure due to a missing JSessionId secure attribute. Successful exploitation of this attack could result in an unauthenticated attacker being able to view the session cookie belonging to the user agent."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-28708 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "298e13b38fd23c909228c91b9b9b6c9c0495a6efc2ac2b43fdd21ada38d3bf32"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat does not sufficiently limit the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability exists due to an incomplete fix for **CVE-2023-24998** (**BDSA-2023-0357**) in Apache Tomcat.\n\n**Note:** The vendor has stated that this vulnerability exists if non-default HTTP connector settings are used such that the `maxParameterCount` could be reached using query string parameters."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2023-1242 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c34dd47fcb3ba71fa7f9b519230cf01d39bc02f0b442ee898c3647ea5ba713e6"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to open redirects because of insufficient input validation. This vulnerability affects ROOT (default) web applications that have been configured to use `FORM` authentication feature. It can allow an attacker to trick a victim into accessing a specially crafted URL that redirects to an attacker-controlled location.\n\n**Note:** The scope of this vulnerability is limited to the ROOT (default) web application."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-41080 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0aff0dde191bdab08ed86171c6a399441a0060c78f9fe082f6bad2cd59368285"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to HTTP request smuggling due to improper parsing of HTTP trailer within the header. An attacker could exploit this vulnerability by supplying a specially crafted HTTP request containing invalid trailer field names or values from a reversed proxy, in order to bypass security access controls such as a web application firewall (WAF) or an intrusion detection system (IDS)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-45648 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "eb6389376d17f0614d68027edc81d2cef7a11d47eb483d6127bae17d404bb1c8"
                    }
                },
                {
                    "message": {
                        "text": "The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-44487 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1a3c81686c1580ec6e51431fc4fcb0bfae7699804ac8718c07efa3990a768d88"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat contains an information exposure vulnerability due to insufficient error handling within the internal object recycling method. An attacker could exploit this issue to gain unauthorized access to sensitive information contained within the request/response when an error occurs in recycling."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-42795 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6d83a2971c3415e6f58890149d54ebd912ec6414b0a8cacca2f081588a920724"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to HTTP request smuggling when used behind a reverse proxy. This allows a remote attacker to append additional HTTP request onto valid HTTP requests and can be used to bypass validation, access restricted data, or perform actions on behalf of another user or group."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-46589 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bfc29fd3088d12e0ae9edd607b67cdc0b5c68cdf8e71deb070a3fdceb925bfd4"
                    }
                },
                {
                    "message": {
                        "text": "The simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-43980 tomcat-embed-core 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "00b9304e397a94e9582be334e0b6a2edb475c69178145ef8f2cbfa8a93bf813d"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c39d73ea2b410e0dcc9d1f542d9a72b262e8ef80a785d0b420e356aa5fef3310"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "355e5866249007773bf51b149d356552ad860e90cc1ae84f839e1ec6048c2c9d"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "02a4ad133785f409f7e87befcc5a90412dc9dc5d91f5039e6003c7a38cf4bb41"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a1ccba177eec84d7f6498ede2758d237267d8106167938d65e6767f675eac137"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a3066bec9fb6bad995aa6b4e7fed32bade6bf2185c923b7257ea41924413bb7d"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "78529fac6e1b29b4689efde15adb2b3d35eb6655dc00ce9d22c53fe86a0614ab"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f16ebde9a5a627a0f2462b5459fde4b3d0d7c7f9e3690f4d67ab17f6948b8651"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a1e9fccbb011128bb33f067fc6c5cacfc61e13e8948343b9b1062edfdc32af57"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "15d6aaf5e70a8b8676872be5d8586a50e79936cebbeb5ad4229c4cd7cb1fde52"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "41e175cbfbdde46f6d9381517fb2ac6bfeff0801914e4a1976c844efc787ec1f"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7e0b6d8780c0890cc84db660a286d017d508ae9f47c7341288ecdf28f3e8b838"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "5ffafd6bcda9c70874db0e7b6ecdc32b42a530cca4f8d40b5dd90039f5c9736f"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-beans 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ed77ae2ed9ece154d73fe328832718c387083067544cc8654e8c69bf3932a1aa"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7006befb813a7c951537ca74d1d42edfc56a3e48e43d634dd3c33db739eebfd5"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4d98f4c51e30087a27ba9ef0fd1930655468be58cefa14eee9427d0b3e5fa027"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c3213ed9289f248e7c3ea7af06276db3fe4a810b9a45cb385ab223a2cabaf4c6"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ef291204dbf50f64534a23288f16d45f538ae62afe793ee89d3d00d7b1e77531"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2edc71f22dafbfd5a75a7269be21ce34263d96dacd079b0cd5e9957f49f7840e"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b2ee093b2bc334393113012c31217908061fef73c6d9efebbeac824dfc518357"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "9108d5ac5ae2d9128ea53d12d9d0dc0826f41d4a4103d7796a97c698cb94b121"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a3bb21e2a8841ecc1bb06fbd7a2ca44bf71e2e886c8f41d84ee09cf47f59c038"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a17150a6ffc9f0d5d2b103611059b461e7bab4b8d07527fcc602a7b5f9da0566"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "05b65e58721135c0fb0623230e3ef27009a78def9e70cb8bd6198665b5b09a9b"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8cbb0237e2a2ecd091267b69601335c553dddd8fa8da23c3a5feadee571a6247"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bb6b761f0956a1ab52f42d70148d9a68b853c09fcee5f150e2880cc99b922ddc"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-expression 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1dc20b1c8e31b1417d20deb06e6dccc99cfd448f35feb4f154a07a0c75c6872c"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "02f87fe0923af005b65b7842d266f24be3b2643e4db7c7b7778a24409d066c72"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bdbdc32876260bc75465469e30047c91e4382c43fde982fb708ba2147ef17954"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8ed813752f4daf16603692fd7c710996afecc62c6708d08c61d533dc4b8e9b50"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ad8ed6f4b8d3334c708cf7501e753f4667f338ea455ac30905b35605662290e7"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4cbca79ba75a6575e5810f6bc03300fe0ff061e064c4bfa70696cb22a520246b"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2073ea4a757500517df65a44f5c5c1000607a1393b29f2ec253f3b8dd5f24e35"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4b672194bcdb2e1538ab835e0931c80b6d0b8eaf70bf5743e14c0bc5b096c7b4"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "176bcc4636b9f9901a4db2a98f40ab0a209824e1e4282d449262e37b6c3a7c4c"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b73ef7d704a7f6c991d76413aae0450a9f7e149bc3f63aa4bb000fab1e4bd826"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cc9001bb01d31153dda014513868dc9741549b10fc5164fb2a1778ed022c6a5b"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "fc873cc4e43c13693ef1086156281d3faabba551ea4ca0ac4ac721eeb37604c3"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1b10ca41146bc0ab0d667dbf0d7d3e9940ff3f2fa362dc4a180e19622a7fab48"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-aspects 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b18dfed1602d12d2052f8cd21ef3c14fc38abfb637876949c54bfa4fe71fdce4"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "58ab945c0f6e179555b5474a6ff179f1e617c7a5935d4a0abd36e727c2a8444f"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "46ceb97346f97291b83323a333d2ef34ede129059ea7c8aa5d2ad8cd90b79ef1"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "52ecc374c86e418eba74e24eb87eccb0668a35258e292918e8fcabfd9f1e7eac"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7eaba4018c28523c5e4735ac8ce7d1af2df75285fa8e579e7033ea3d6e1dd822"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c946c824b2ce4d8f060539b1304e569d1b456f0b2f678dbee13fb882aa135643"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a185af371e12f3d21c8d8068920ba12323cf6afe81921767e4629716d2c288e9"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "dc184a63f6b89117841017d35583a54cce5950a5499b96d69b4b29f93be9fd00"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a223e10e79e31dfe79804313a4de4133aef4e0d2aeafb79aa5c1492afa886459"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e1c18eff1a870a116c9b9db149d1433d9b5f26040b4c2ef872bf0b947b9dd881"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3fb2477ea1814683e3cbb5e91995f9dafaa32a123581b27decf76a71e334fd5f"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "eb5f77c9792b2cbfb5b5b26fc512f6bbce4e5a2edea293f24671547689761e97"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a2a857cfb16b3e7b0a76aa67dcfc0202e1ad7b9e55036173bb3a1f51b1d80960"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-web 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8808d1acd1edb9f40b9e521ecccc5cb31a3dfc0df8e2a1c10cfab150b3350538"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a58bf51561752191774bbe8c6ab32e808ba58e1f0c768ce7560a44bb4177b901"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3481f34d430ba57e7e0f12297a1ed1bc9ee286d45f67b1e0893e1260006c6fca"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ca5144ba2e461d28199af6506e920761d87ae9f5f57bd6ed47d30346a01284a6"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ca0072317d12f302f10be953a612c90f2f2341a77adb6c989b2be0a68cb690d8"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ee13c080ba6830fbb4275132361d740ef3e4341d502788b80e2f4a03d2af096f"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d6a28fc7e7b0fd8b2abce25fb84d0878ae042ffb0dcfb3476a3de85dce8c4a24"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "00ac6de6326b3d9a58760559fab96f34a5999f49604baad5f5193cc0fd65ea8b"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1dafda0f54796258ea0bae2a665f1a425c6a0952be0090f37fb1de47eb67a799"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0b9a0cb76a9581d95132c6c9ee45284aa72638a32d37d3bd8c84f163b2c932a2"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6f91c4197583406d5963fae6ea5b673fe79188d8469737485e3a0c8690a24f7f"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "476258e78cba8827bd0596d97a88e1b942b295312e0016c95750b81694e8d7f7"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f6c0e171d479a8f21550321acc4ad91e1b4139b679e891ab18a84d52df16ec4d"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "333943b656e0e7b8303a75fd12ae38a408ded65cd89db9cd1bfdb2a1be8658aa"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-starter 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "fab76a9524b91bc613898847370db053f201e97dc86af77812d7a2ab6b40ad2f"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "77b78d2442aaf3edd6d2520f1e8b7d9420dc25fbcff8f8f424721aae47051830"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f2bfd594299c799dbde3fa8599e9ea63b77ea68ed9eccc800208992f32445c02"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "33e200e448090705e7d49463b4a7a79b9091e37cad3e638dfbdbfa8ae502f5cc"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f849d882cfbb8964fe95fab447b0881493e0d2bd0531b2221ed8011a318feaa1"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e8f2e4df3835f82e4045c267f1be540bdf0608931f5cba41c8fac8da42baf2e3"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cd16bae9f6f6f93e01f1bb7b0013bd48a80894445b045cf594c7663b3c92fdd5"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-autoconfigure 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d89e9b056c6e4850dea93486a4662c7741e0c95172f879274e9a1b51aff6907b"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bc0c397ea88819c9c7dcb352504226eb182f9b5452b26fd47402a8ae8e9a7a2d"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3dbe790b50dcce887752bf85c5bb3914b53dafd30c2870b9233d2cb54aa1170f"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2e85d7608703eefc324fb95d0427f199ed1a700cb7f216e11b2ced978ba9e34d"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b65db28fbd1ba8afaa4c55d0cf26153224f5a14395a817925285cd327885c85b"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ac492875a17244e5d5f1fdaa45b390c530a8bcbeb68cd4081d179a013e02ebb2"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2ee4a9d807db368b259564b7441156e34ca3fd190cc785d07e3856f8c3106813"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-dependencies 2.3.1.RELEASE: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bbe950843d13a27cbb2e2d793dd06cda0b5c0f9875dfa5bc0f03f17dcda6acff"
                    }
                },
                {
                    "message": {
                        "text": "Apache Commons Text is vulnerable to remote code execution (RCE) due to insufficient default restrictions on the dynamic evaluation of `${...}` strings during variable interpolation with the `StringSubstitutor` API. An attacker could exploit this vulnerability by supplying maliciously crafted input to an application using this API, with the default interpolation lookups `script`, `dns` or `url`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-42889 commons-text 1.8: org.apache.commons",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2be371a3eb2fe2a51ded3b15e134af9b3dcdb427c54813fa1431c0786d964ffd"
                    }
                },
                {
                    "message": {
                        "text": "A vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-27568 json-smart 2.3: nimbus-jose-jwt 8.3: net.minidev",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3eb8006242d619383e2e2a67777eade8b9cb911db7261a1783470078a563527d"
                    }
                },
                {
                    "message": {
                        "text": "json-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-1370 json-smart 2.3: nimbus-jose-jwt 8.3: net.minidev",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "02d4a9716fcce9552607515fc3a35cb86889397e109731057be900d09b3f75a9"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d9d888dd0b6cb9c2d4d6bc00e92ba77aa3d0849ddb262e35039fba5c7cc6fafc"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3c2e4778a42ec217ca8e3da85b07d81eea8659fb51665625810e83d8d6b06cac"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a98d1ecddc2e7ab1986e1ed79937c2bbf6724de8b09bb80dfe29ae2eb1dcfabe"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "efc698b615fb3dc4d3fde1b11aa2887903c9693d6b5b25ec9770e4f7ba321acf"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "11c330f79540ffd761fa28d1e0813df1681028d9f487c9eecd079ef8025ae48e"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "78db3be7b601e8c183c6952db59be98b06b12d6aa7a37d102ac64b9137fa93cf"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "5d92d393f0fe52966009aaf44ef93e0aee013c5e9843fba27cdb6dd8428e6dc4"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "58ca7e6df3f2f04497b8f01d9f4c156a1d6ca7ce1da4a3b73751448a233c9e9c"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a99a1a7b8e722570e1164ebcd6effb2021238f3c93ee30b254c646b06a381c0b"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1c4c4a86d6e548343a4ccbead9fa8b67e23a28a8507d266d7e55250160e47bed"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a1bf5f6379f3f011aadee7920e03a59089c6be42c9a47a77875511d351abbaec"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "feb07257a78d83f3302fa07351f0dccc6d0aa295c7222ace78347101395392db"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-orm 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7dba9714fdd5147a188b8fb613be2aac98817fa6f04ea6b92863289949e3a1e8"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e29016fbf914675f265b3f5e2a7bb9a8180d873f570d1d20e1e7f2f967074f09"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "30d4d5a8a5e117087fc3a771f1aaa86d2f2390b68ba0f6b259c4b9cc5418cc0a"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6a422ff7859e01c90fa9d0656d72835f0f742774cb5ea59805b6bfb480b2d94b"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "122a9161c7f5fa71e6fc868a37012b859243967466f97c1d9de8903745f7ea4d"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1d1a5e54252a5b598a47b07fd1bb38cc0bb3864d034c64542f990d9a73633908"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2eb3d4f7b1a90761a731296e41d6dd4176e1633d1c54414d33acf6bdd1383145"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "030df194ef26e211528f2f986803b904bacba79fcb34a5ef7e50ac3ca2dbdd30"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "09766c2459eaae466dea4284176ca799ae185fdaad48819a044ce3c3301a8e65"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1d133a1e8fe43e5fd3f9e7c4354af343217556a814139b4502399c3607511e8e"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "64ac2f2d2a17dee40ddcbde1bfd11d850fac59dfa59f5da11d75f6f2b8313c23"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bd1ee336f0c26a70a8b8de8926f39390a2a7d6fa0450b8e74f5e0cd4f00dd794"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ffacac26ee1d606652fe1ba1f9822c503c067ba14485921aecb88927f4b3670a"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-webmvc 5.3.6: spring-boot-starter-web 2.4.5: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b441fb27646eb4e6b5b0f055d5df38df0e018b63ec77c2dece568a592d88e741"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1fd348c409442835e778c1807ec3ee3d6ba04740a1649c1706e2cf381c93c8c6"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "afbb911d110f8ba49290573140359b021ce6843bdbb5ea5105f78b827ef3d8c6"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ff7cb559d1a37c690793a4c562f7365121679f95dfaca28167992d4932b66f18"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f9d8a6c56b0e674494042d2160effe6d3d9de1d4ce3c9146063e2454da43cf8c"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "14c2e936ac18934ac2b72c077b16614143e3767dc5317b8b168737b113c26ce4"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4ea62c58b708e45ab3019f18cee1256f22a8f51fcf1833c5bcf52ebfde7bf362"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-starter-tomcat 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "996756ba6c48b50fb85252f1d9773857317e8806dbf464a53c15a4d43e072d7f"
                    }
                },
                {
                    "message": {
                        "text": "JSON-Java contains a vulnerability which can result in a stack-based buffer overflow. A remote attacker could exploit this vulnerability by using a crafted XML file in order to cause a denial-of-service (DoS) condition."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-45688 json 20190722: org.json",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4ce713db5804f0420879a138a69c8622689cbc0718f163b9aece7c1bb4077f5b"
                    }
                },
                {
                    "message": {
                        "text": "JSON-java contains a denial-of-service (DoS) vulnerability due to an error within the parsing of embedded null characters. Successful exploitation of this issue enables an unauthenticated attacker to supply a specially crafted string in order to implement a denial-of-service (DoS) condition."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-5072 json 20190722: org.json",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7a23f428fcd1ea0f3e4c6e07f3b8d70721247b6ac7ee0db01e8298159c006e51"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "48c6886154ed5fdabc3636119c64e8b73d93866d6e08f347a56bee2f065d64c7"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3e0c13f839cddc4ff8c5d37d75b1a4d84771dd6065ffc3ec9fd37eaa1585b991"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ffe2c490a45705be74003631ecb9bf82628ceb21a9d2b8f1ace6abb4ebdba60a"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2f6d5be9dad260230b08c950ff88256761feb4ce53315901ff7fd8867db89d44"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "eced9bfc8e2fa807a0f39bf230e52bbb05adc877cd1677e704fd4d52e31646a0"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "634ceed7d5fd040a67c5ce717839abbd10e8c63a496a1057cd66db52ed853eb2"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-starter-json 2.4.5: spring-boot-starter-web 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c9be769af2952d004d5b4704032bc993aa027b849b0768862446a0a4dac78fb5"
                    }
                },
                {
                    "message": {
                        "text": "Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-2110 jakarta.el 3.0.3: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.glassfish",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "5a7556566571edbcf1cb77af1fa758064acd40e6d9c37225411c1bb3faf176aa"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-44228 log4j-core 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c57eebd193180869623767c1cd70cc9e5e13da1b16bdfe10a06143e0970d24e3"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-45105 log4j-core 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f752798075dd2128f756629988acfc365a77abf62821ea1983f59c4f3d02c7ba"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-44832 log4j-core 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "69ea314fb340f47ea864d09d72bc99213b31bfbb55a3ed6ee1484abadf8255df"
                    }
                },
                {
                    "message": {
                        "text": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-45046 log4j-core 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "956bc61f04952177135f93f0827831d9347faf59ae60378f0714dd06879f19d2"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c622ab4c33176f538c5d89af21545c750e0fc767f33d55243d6294da8a920fa1"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d8b154636f32a6d0e0159177e17e65bc1e3e401e201ad82cd9ecf9623ad0208a"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "130f2dbae7a40c2bbd4c5f38cc6017b180e17e55186088a7c90595ae1c86cc34"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "39f083b172c9ad3875e548e5e80a55fe19e5288f60275ccab361d6671ae7b3a8"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0ea604487d45339acfa25943ba565d22fb2db775ef4e8248ba76e61aec045811"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a31c805533e577d2ef37d7cea63e9cf8664001372b03a36fa330ff0487ce246f"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "484346d275df856a60c802204ae359a318ca531edf6ee391aede8021fe3ba0ca"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c24e1e31de02d6f8addd1102ec44efb6fe0ebbc7b0b04878a23bdce4f3d59925"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ff2f196d46c3add8807f41a7756d20f7b4bc15fea115b46f0389cd1c88682a35"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "34d9dc31ee0d95356862e9242362a16b9c81df66b18fc3cb8644b6d7562b68bb"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4cbd2d342d2f976080ab1046a19840fe4aaae3f27b1b5a5f1eaf5ec62b14f793"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0c4023f630e0fbfd19526344437545d48353ba76e45aaca77763e139a5daa23a"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-jdbc 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "67b6c09e47269afb4e2678ced9caad40af514c2b52e5dbe645439f2f8a98d11e"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 log4j-jul 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "9486d40cd40afc5135e62dfb3842f3cee4e3c3d4e8b1920eb88722c951052e56"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 log4j-jul 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f7f809f35fe6f29d90995ddd32fa09357eeb1180fcebfe4697c2ed1421c9be2b"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 log4j-jul 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "9b9a0ef6df99cd21fc56e89a2042e1e2f88707d4c9db9681a394d717f8bc2eb5"
                    }
                },
                {
                    "message": {
                        "text": "By abusing the `CREATE ALIAS` command in H2 Database an attacker could start a reverse shell and execute arbitrary code."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2018-1048 h2 1.3.176: com.h2database",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cb8debc7ddf7261c766d422f270e0b12011fef0da03e1f47f65e393fdea59e80"
                    }
                },
                {
                    "message": {
                        "text": "H2 Database's backup function contains an arbitrary file read flaw due to insecure file permissions. This could be exploited by an attacker supplying a specially crafted database file which triggers a symlink attack. If successfully exploited, the user could read protected files on the system without valid permissions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2018-2507 h2 1.3.176: com.h2database",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "5f9d672e4acc4bba03814ba865917ab8457a8861ee0a799c09abd110fb4e0a9b"
                    }
                },
                {
                    "message": {
                        "text": "H2 Database is vulnerable to remote code execution (RCE) due to the inclusion of unsafe Java Naming and Directory Interface (JNDI) functionality in its \"Console\" component. A remote attacker could leverage this functionality in order to load malicious classes into memory.\n\n**Note**: This is a different vulnerability than **CVE-2021-23221** (**BDSA-2022-0186**)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-42392 h2 1.3.176: com.h2database",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7a55013690fa787bee965270612a2171d42a2f7967f56377f1fc2f0b8b30da0b"
                    }
                },
                {
                    "message": {
                        "text": "H2 Console (a component of H2 Database) is vulnerable to remote code execution (RCE) due to allowing custom classes to be loaded from remote servers through JNDI (Java Naming and Directory Interface). This can only be exploited if H2 Console has remote access configured and no protection methods are set.\n\n**Note**: This is a different vulnerability than **CVE-2021-42392** (**BDSA-2022-0048**)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-23221 h2 1.3.176: com.h2database",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4b845506a87eed58ff033edb62cb73b773b8979e916c5353d94625272cef1d4a"
                    }
                },
                {
                    "message": {
                        "text": "h2database contains a vulnerability wherein a malicious local user could be able to gain the password for the H2 web admin console via the `webAdminPassword` argument by viewing the running processes. This could lead to privilege escalation.\n\n**Note:** the vendor has disputed the validity of this issue, stating: \"That “exploit” requires `ADMIN` privileges in the database, so it isn't a vulnerability by itself. Users with `ADMIN` privileges may do anything with your JVM and system by design. You should never give these privileges to untrusted users and applications.\". However, Synopsys CyRC cannot confirm the requirement for `ADMIN` privileges - it should be assumed that any low-privileged local user could list the running processes and view the password. In general, administrators are not supposed to pass sensitive information in command line parameters, therefore this potential issue is not considered as a vulnerability by the vendor."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-45868 h2 1.3.176: com.h2database",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cc1aa510b33fae4ee8db67035c89dfb8c8d5a5608cd94cac2b604803b2f4c6c5"
                    }
                },
                {
                    "message": {
                        "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-38749 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4caca2bcb78717c8cd31afda8e8492bbc57eab1bbb4ceb52c0f9e89415853425"
                    }
                },
                {
                    "message": {
                        "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-38750 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "25c04cedf3455ff5fac021f86923b3309e3710da30c0ba9c67fc9e26d9bf9189"
                    }
                },
                {
                    "message": {
                        "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-25857 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b9172daf77bb08114ec63482ad852e6c4d60ea10e0c013e9a6b3df0f96f0b372"
                    }
                },
                {
                    "message": {
                        "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-38751 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "eb80a4f44045cfab190e015860362ad04294243d9f5e120f33fdbbe07e1b0393"
                    }
                },
                {
                    "message": {
                        "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-38752 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d2917ec47d418821e43548722eed4ea16fd84a62115dc706a9be5967fe9d1fcb"
                    }
                },
                {
                    "message": {
                        "text": "Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-41854 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "5cf1bca2928c1a3b52f233519c183045323b1b7d37fd9c0731149aa94c9c97d7"
                    }
                },
                {
                    "message": {
                        "text": "SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-1471 snakeyaml 1.27: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.yaml",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6de2517aa125d7f4ead454134ae1ebf255f5c362bd7f1c5c812252db7c745456"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "dbb26068ce106c960c0467663d8d699f36ea859375a951a67faa8a6b9647edc9"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "88b344e72908345a6a6f3c2b253331bb43b31192e5cc64f427ec75dfb81e8ab7"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c55f22876ef62dd9a2411f2a8a7265b427a3e346413eec6174f897aead150a1b"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2af1a59a8e8f853518e7d75deb83e112204c443a84fdc3cbc1ecc2c83c302b7e"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "5751d082054622487d0f7edc627da4fde37ba57c8fb5afd98b5ea5014a4983b2"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "fe67cfc4b2eab91ced7b652e073a422b1fd193f4cdfde152b14febd1ed93cbc9"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b8864c904ae8d2ba67f70e72d3de251b92d5bdd36a41dc2dca8f08d6a9c99090"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "470d23bd36768cc0cb4cf6299aefc8092edd51e781d5dd5278d440cbf5bef4cb"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8b14ee844c20280643b2df6b25e4c4a9ea3c1b9ce38f71141b39623a79182f9e"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "37a4d9614e825cbe4e76681da9dd52a5cf4b60d41acf377c9e01021ed2a924ed"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4ebcc9ca14cf974a2d272a6c3cae4a099efc1c9da3d50d5bab8bdad68d0b22f1"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "21aa08fb2a19cbd0870333dad374a829796089fa531d437ffa6cec19505ce1ff"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-aop 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "74d30b73110d9abf9b4be4e55eb7ec1d57ab0e3223661b9e515fc64985775596"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ec1b0f5f363c4952b9e682263e7fd60bb6ad05d7e1e310956f301835116f23b7"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a6070cde6b511d4395ca722c3968af031d253bf4194b33dda575ffc79eddfb74"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "69bd310f99036dcb01458d8278466a3e6ac2dacff2799ce2bf9a7fc6c229f0e5"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cdd2a4fabf9d2d77dab453e42d508f298fa33d0be65cebf5af379f15a8127351"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7a21b1d85fe70c122e09d8cf9ffa0a2b0064bd513bd4ee12e8ecd6da3e4751e0"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bb5ef02a8f89966a4e92e09b0e4d159725ad80b25d32448c0eded20702390890"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3fc7847540f4ab032332e12d50dc59cf8f291410223ff92ff32f6f64d0ad3e46"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a66ef307b2840af8227eb128743f2484b32301fdfdda59ecf78b1f1245886c31"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "566e0d024dc8451b192533aa94fb4ee8f403f22c68a5bbb6a822345c63fbaa56"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "060230fe95821affa7bb5e8f28905c88bf8c165cceb98d053b3c0343bdb0cf38"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "dd530e25acd47207890c1d5aea7ee08e0ffe9df51448552ff53bd85409feb15b"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bbccb7c9e4dce1bf40b26cc78c6f2a9a6127272a6a029ada238a1087fbeb6af9"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d33407c0120f8fa738e5cdb89d1c951e2d28eba491dd11d1f0b4fb62ef73259d"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-starter-jdbc 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4a02715589ec23998e43abd537536ad13d10db9e82b75b8246f60be8e92262b8"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 log4j-slf4j-impl 2.13.3: spring-boot-starter-log4j2 2.4.5: org.apache.logging.log4j",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e12ce54c6fa4e819c6ca260e0a8746038a0449eb9c144b89e76e31e479d7e526"
                    }
                },
                {
                    "message": {
                        "text": "jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2020-36518 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "41735b64d8b5f399836bb5d6b340e37ca004c8a6b03911d71390707b08e13d76"
                    }
                },
                {
                    "message": {
                        "text": "jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-46877 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7054192523f48894ca671e6b2c2d05b9065c5691cb0e1c51be21b651638f1861"
                    }
                },
                {
                    "message": {
                        "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-42003 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "5fc2bc80f3f5345f720213e27c886ab2f12bbf1d25f954a66577f1826d757a13"
                    }
                },
                {
                    "message": {
                        "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-42004 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0eea4e192a0a857a2fc1d86bd189c35103470b59293c518f5d3599d43b04bf57"
                    }
                },
                {
                    "message": {
                        "text": "jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-35116 jackson-databind 2.11.4: spring-boot-starter-data-jpa 2.3.1.RELEASE: com.fasterxml.jackson.core",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a1e0c2f14e51f00f482b3e7c26e171b0e026d821a9b537bb1bc47955f65e76bd"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ff6a4498b78496a00c1bf2925f218a13b290d396ed141615089874525abf6dd3"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "09d31a89a3a5d9ac076d84d58340d7522ab178328a153935f0390769e315d607"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "485db28e979a23176c0a236e08b2d53c85b921d04466ab6a14fb493356e77243"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a19a8a09ef37112bc987abd0d36ee9959fbce443916fbdeb9686b66148a35abc"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b962f7678e5f73bacb90afef59837eae62e0922f27718f938e2d0296a98f94fe"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3203f33e9e824e73f82997227cf945016f19f956e59ce980ce64fd70dcb2f2a4"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1454cf0ec9920d75db69dc80f911ddb95900e1cd497e2ab93433bb19a1770b9b"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2f2d9705f8ba6a43428e098d0b56e6433baefdf955bf8fdaacc1ddbd3757d041"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "fdac79b2a40169e1598f67db530ae2029b506b97a0c833920c7fb7c01f1a4058"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2922b32215a456f6dc09d4071c842ac7fc5fae3deb258976a6481e75dbc8b46d"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "233ba8a31272ccced95994c415dbc7434b74a7fa63b68269242b9e64f82c017c"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bd65d0901050e8b52e9c42118e53a8d603d7e88719bb8ae13dc0be43fe16f227"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-context 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6a55a02631126ad58d2501a3f4ffbfc62b0c42350c55f8f8de30493610010e31"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "631ed70848eba777249cdd6da3866e3e3cf168b934fcfcf717663827dd7456e4"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7b6a0a542b16454851d877bea356cfadce924f4b0faf038d90c864840622394d"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0ee3754681e3bf556cae6967d73b95bc9a5373153c6fab09e7b5c50058a33932"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "27a482466ac6f097ea3e76895aceaaa405a941019dd22eb5e70505d6b6b1fb85"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "062e853095d902e86842cb56bc6cd9149ea40fd4b00268e7ae33599ce0fe1b6c"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "af523016f4e70c627b93a008684043cb7668051bf58271cfe37b96f1b38e09a7"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-starter-aop 2.4.5: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8d64efd028752eef403e17c1beae7346dc361de7f90b4c7ef9d5d1a13b5ad5bf"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "85e5209589225b3892539b32b56bea74957b911aba124f2914f86ac112fc59cf"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d9568f5d9e0fe0ea6663e38eae6fe855ada9b1f4cc37d8150dd3730937e0759e"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1d524aefe28ee7a041cc38b5c2805016676da8be175f3a50c5bf7fd48e32cf7d"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "51c9c8d61e2511ed9eaf1c8e624e5cb90475f07e75c2ae34cebe1f585973b43d"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "dbe77c2862fc6384a310af79ab24bb42806573f5a47a8f8855230abc2e5c9f6a"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e4988e01d3877c136cfaf682271a4c6fc8c882983e4fa2c84f5633120d9d8ead"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "aed6b78079166c55c1bcccf85e86b1d920e5be9ed856d53b9bf0858e8c088e64"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "79f67df3e3e6f801d5efb485a5b909c894f1a9f67fa493fa5ad1592ce3a94882"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cf3468fdfafc2c3d5c3d215ce58dce03df75ce9c610c8ab6d1a8619be67a07a5"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8a367d57c207ae9f835a991cb2eadaaea9c057f55b0364b5b113fab09f0d3d4a"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "98edf8f1321047701f0d471798edf45bacd8a8dc7d60be5e25435040913af875"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "511b11b851604beb846754dcc293cb60f715fa9cee206dae8a13892a4b603559"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6d656c3be7d500a7ec710ebec006ff606fa5c2e0f65d9c25cd67d029ec5e6a4b"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "64700663b5de5c86d7c5fc025912620e38e053b746238f5ea210f7dcd7eca06d"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cc8515f099e4b5100e7c41bde1fa0ad91e2e5aa9d8e6bdafa19733e719e79bc3"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2eeded4ced6b048672a6fb327a3d36454354ca33f743fa181872ca17b13de134"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "19a555debc0e661b8e0b7650f9e63e53b2470eb2592aeacab6a973470ca91281"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "49814304f3ec62621a7665e2bd1828eac430b36b399525e22d38de30082fbba7"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8b74af35f1d647ca108b3a58ec754a8249d560f94f08d4909e119d45f4bd51d5"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-tx 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "39f54a0257024fddf895a041413ee804e7905330115deed8788d96abe983ef4d"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22118 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b76039e825da026cd1c51e5c0b0567e0a9334166020b079bdb453b07ed36a60b"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22096 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f6d87bdee924ab25cb9359de46adc5d91beab7680a7421ab2bd00af839b47ed8"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-22060 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "43f9aebbc0895aef2e7e16b8149156723e9180696b8ae64380fb0cb20f4ef091"
                    }
                },
                {
                    "message": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22950 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0ccb20d7f6b5723f33b550c54d3fcdae5e608470f7b0ca955d6549618bb01f8b"
                    }
                },
                {
                    "message": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2022-0847 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "9c1f1f07204bbb8b7d0761573b31c8974fccb429c57443e6020b56f27e243666"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e0d61115231b16e068b8c235d1d5c2cc4ba1616aec1e8ad9d160322383ff57f1"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22968 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2eb3ad48e87b69ab3ae45e1b327d5de8ddd809af711971e2136b17648ca57aa2"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22970 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "29769679484ede9ad2dcf2018dbfc6805fd036371ce83886b04f9913ff6858ee"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22971 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b80f82f11d439d782b77b55e96e3c5316e50b03a688bc6d6475fe15521074dcb"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20861 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b2f56855d1380bbe350ed867f91d246f5bbc78f732c597c565c107f0fbc6ee45"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `**` is used as a pattern in Spring Security configuration with the `mvcRequestMatcher` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Spring MVC."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20860 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0801c05b9218fa36fc1ceb5099bde548fa2bc6b5598ad4eeec57923639a96062"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20863 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c70d56017bef079eb89591ceb10ce899ee9445d928ac7f3990832bd1b1f684ac"
                    }
                },
                {
                    "message": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-1000027 spring-core 5.3.6: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.springframework",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8df69af5a7b07e0c6f0495f4e965a41a2d4b818a31cf5491181d5495a5d7324f"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3731 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "56b5a02f7490de77669a13cb1a29b4ad3246312eb4a14d529ea7a923801e9e0c"
                    }
                },
                {
                    "message": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3817 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3fa9e614c193d2d83ee731c9a4e27557808a8816f9e8b6a46af34971de1d4496"
                    }
                },
                {
                    "message": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2021-3887 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d7a3ffd4c0582339da0e879c5f7f4438f6307cc1eeefccfc3fab563a25745878"
                    }
                },
                {
                    "message": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-22965 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2f48a502073bb178653b0851cbd26b14f13e165d03236d328ab4a72b0b0d8031"
                    }
                },
                {
                    "message": {
                        "text": "Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20873 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3c1cf657d6ba02eb0a6978cd7c609a477131a9ab6c300d5f240995ab5ae36744"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-20883 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a4b829a3cc24f1dba3c40e2ae9714d6252bd26ebfc50c995f9087323802e35bb"
                    }
                },
                {
                    "message": {
                        "text": "Spring Boot is vulnerable to denial-of-service (DoS). An unauthenticated user could trigger the vulnerability by providing specially crafted HTTP requests to a web metrics endpoint."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-34055 spring-boot-starter-log4j2 2.4.5: org.springframework.boot",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "104d6732188b13a1656e2263a91dd76767dc168c6d50c954ce72e025b307d3bb"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to bypass of `LockDown` realm protections via incorrect parameter escaping."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-30640 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b84536d3b6418dd984d8cf4f0131a140077c84e1b5b72368246dbd8aa6ea114b"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to HTTP request smuggling via incorrect processing of `Transfer-Encoding` header."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-33037 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "56f45fa22090b97c0a3665cb04331ad4a5dfb3d2ed7f99d16d5d8e0dc3848ca5"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to denial-of-service (DoS) due to a memory leak in the HTTP upgrade handler for `WebSocket` connections. The memory leak could use up the available memory resources which would prevent Tomcat from operating normally."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-42340 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "5cd226d3fed7daad5eea3d75ecc23a1080b5eefa8502d69661ac72fec3ca55ba"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat contains a TOCTOU vulnerability that was introduced when fixing CVE-2020-9484. This vulnerability allows a local attacker to perform actions with the privileges of the user that the Tomcat process is using. \n\n**Note**: This issue is only exploitable when Tomcat is configured to persist sessions using the `FileStore`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-23181 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bbad221c65688e96ee429f6ef88ad521ffc6de40097b939be3f20a3eace3e01b"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat's documentation incorrectly states that `EncryptInterceptor` allows Tomcat clustering to run over untrusted networks. However, `EncryptInterceptor` only provides confidentiality and integrity protection, but does not prevent the possibility of denial-of-service (DoS) attacks."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-29885 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0d50f38a95a86bdae77eedc61426ec7b5850db9aae8f6932614e2ef7db9aa340"
                    }
                },
                {
                    "message": {
                        "text": "The form authentication example in Apache Tomcat is vulnerable to cross-site scripting (XSS). If the code for this example form is used in production it could be exploited to steal user session tokens or perform actions on other users' behalf."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-34305 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "aefd0c6718c4c3120fe64f76ef9760d18ab22130a9c42bcfd460a4346f8803e2"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat does not fully respect the intent of the `rejectIllegalHeader` configuration option to drop all requests with illegal headers. A remote attacker could potentially smuggle requests with a specially crafted `Content-Length` header when Tomcat is also behind a reverse proxy that does the same. \n\n**Note:** This vulnerability only manifests when `rejectIllegalHeader` is set to `false`, which is **not** the default setting for any version higher than the **8.5.x** series."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-42252 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2f710f3aef0af4d4e2dae4079c1db98f336ce9d06310d81c4380e0f289d8f30a"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat's `JsonErrorReportValve` module does not escape the `type`, `message` or `description` values. In cases where these values are constructed from user provided data it is possible for users to manipulate or invalidate the JSON output."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-45143 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b4c94c6da5c85f4d37e73ccf64cf564349bd5d28672d62250706134a80bee0dc"
                    }
                },
                {
                    "message": {
                        "text": "Apache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability was not properly fixed in Apache Tomcat and required an additional disclosure as **CVE-2023-28709** (**BDSA-2023-1242**). The fix for Apache Commons FileUpload was not affected."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2023-0357 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "70be7f096d94b9f8811fd6458ba077cd8335bd41d66391fb50cbf309e87b5ac7"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to information disclosure due to a missing JSessionId secure attribute. Successful exploitation of this attack could result in an unauthenticated attacker being able to view the session cookie belonging to the user agent."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-28708 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ba71d77d29e8f8bf1e43e61e46ffaf077aac00bc2e13fe08aa35650e00c130b4"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat does not sufficiently limit the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n**Note:** This vulnerability exists due to an incomplete fix for **CVE-2023-24998** (**BDSA-2023-0357**) in Apache Tomcat.\n\n**Note:** The vendor has stated that this vulnerability exists if non-default HTTP connector settings are used such that the `maxParameterCount` could be reached using query string parameters."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2023-1242 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "78bc9f20597c05e3bc8942b15f40c118c46e8468c70e39a2fbe9410daefff721"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to open redirects because of insufficient input validation. This vulnerability affects ROOT (default) web applications that have been configured to use `FORM` authentication feature. It can allow an attacker to trick a victim into accessing a specially crafted URL that redirects to an attacker-controlled location.\n\n**Note:** The scope of this vulnerability is limited to the ROOT (default) web application."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-41080 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "fdd601155a4529e6791c4628c159db176354ac7fae0c99bc4e94d5abf68dac77"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to HTTP request smuggling due to improper parsing of HTTP trailer within the header. An attacker could exploit this vulnerability by supplying a specially crafted HTTP request containing invalid trailer field names or values from a reversed proxy, in order to bypass security access controls such as a web application firewall (WAF) or an intrusion detection system (IDS)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-45648 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ee7d6c403a6a66c2f59212d0831d62017b18b71d2b71c6721229916dae8baf68"
                    }
                },
                {
                    "message": {
                        "text": "The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-44487 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c492b2e03e34f0347326007399739b460dce2224bf8a3c0bdf260efd423d9289"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat contains an information exposure vulnerability due to insufficient error handling within the internal object recycling method. An attacker could exploit this issue to gain unauthorized access to sensitive information contained within the request/response when an error occurs in recycling."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-42795 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c87d37d0f9fae150eaa2e051b51b3e6b2a004d3fa41330e8f8076ab36abf8aa5"
                    }
                },
                {
                    "message": {
                        "text": "Apache Tomcat is vulnerable to HTTP request smuggling when used behind a reverse proxy. This allows a remote attacker to append additional HTTP request onto valid HTTP requests and can be used to bypass validation, access restricted data, or perform actions on behalf of another user or group."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2023-46589 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "17e316565df3af77886858fdc8f16ad8fb18d1d98e8b700e1493f22ed19ca61d"
                    }
                },
                {
                    "message": {
                        "text": "The simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-43980 tomcat-embed-websocket 9.0.45: spring-boot-starter-data-jpa 2.3.1.RELEASE: org.apache.tomcat.embed",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1e609828d7f7811c56cff0c9fa8e3460cc9a4165ab1209e4de9885077ed670b3"
                    }
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/ACE3044AB39D2AE61614C5185033A65E?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 335
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3bf3e2373a4adf3fa6d2a0f05d2ebbc36094bff29de7a522f0ab0f1680a4ac85"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 331
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getOriginalFilename\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"org.springframework.web.multipart.MultipartFile.getOriginalFilename()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 331
                                                    }
                                                },
                                                "message": {
                                                    "text": "Assigning: \"originalFileName\" = \"file.getOriginalFilename()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 335
                                                    }
                                                },
                                                "message": {
                                                    "text": "Creating a tainted string using \"originalFileName\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 335
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"genericFileUploadUtility\". Constructing a path or URI using the tainted value in \"org.sasanlabs.service.vulnerability.fileupload.UnrestrictedFileUpload.RANDOM.nextInt() + \"_\" + originalFileName\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 335
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/8352CE2984A2FF5AD560EFB063CE68FC?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 350
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4e882c21582f6d5d30b05b5a2e0e8f8baf40bb61d3a9dc29601d1c49f7970a2c"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 350
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getOriginalFilename\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"org.springframework.web.multipart.MultipartFile.getOriginalFilename()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 350
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"genericFileUploadUtility\". Constructing a path or URI using the tainted value in \"file.getOriginalFilename()\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 350
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/682A37E0956A83F4CA758EC5963D71E9?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Control+of+Document+Type+Definition%26context%3AtoolType%3Dsast)\n\nPassing tainted input data with possibly arbitrary DTDs to a weakly configured XML parser."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                },
                                "region": {
                                    "startLine": 73
                                }
                            }
                        }
                    ],
                    "ruleId": "xml_external_entity:unrestricted_dtds|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "21a896c13e34fb551931d97a3d61ba232274ffa90fdf2c7ac7c2c632c0761026"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 70
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getInputStream\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"javax.servlet.ServletRequest.getInputStream()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 70
                                                    }
                                                },
                                                "message": {
                                                    "text": "Assigning: \"in\" = \"request.getInputStream()\". Now \"in\" is tainted."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 73
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"unmarshal\". Passing the tainted value \"in\" to a weakly configured XML parser. (The virtual call resolves to \"javax.xml.bind.Unmarshaller.unmarshal(java.io.InputStream)\".) An attacker-controlled DTD may include external entity URLs, and the resolution of external entities may expose sensitive data or result in unwanted server requests. Processing an attacker-controlled DTD may also result in an overwhelming number of entity expansions, causing denial of service."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 73
                                                    }
                                                },
                                                "message": {
                                                    "text": "The recommended and strongest prevention against both external entity and entity expansion attacks is to disable DTD processing in the parser. Set the XML parser configuration to disable DTD processing."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/08C5C4E3770E80FCF4B66C7951D1C502?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 190
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ff54f224e2f40e1cbf9a8123156333a6d57cf27c204962d753d328bb23f4ac00"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 189
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getOriginalFilename\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"org.springframework.web.multipart.MultipartFile.getOriginalFilename()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 189
                                                    }
                                                },
                                                "message": {
                                                    "text": "Creating a tainted string using \"file.getOriginalFilename()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 189
                                                    }
                                                },
                                                "message": {
                                                    "text": "Assigning a tainted string to \"fileName\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 190
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"genericFileUploadUtility\". Constructing a path or URI using the tainted value in \"fileName\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 190
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/29C3B2B0F0C020B45E1AB434255D52FB?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Control+of+Document+Type+Definition%26context%3AtoolType%3Dsast)\n\nPassing tainted input data with possibly arbitrary DTDs to a weakly configured XML parser."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                },
                                "region": {
                                    "startLine": 176
                                }
                            }
                        }
                    ],
                    "ruleId": "xml_external_entity:unrestricted_dtds|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2a263bbe11aefb69d8a7283097543938f34e2bc9de6a0f628729b228e25b5004"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 170
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getInputStream\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"javax.servlet.ServletRequest.getInputStream()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 170
                                                    }
                                                },
                                                "message": {
                                                    "text": "Assigning: \"in\" = \"request.getInputStream()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 176
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"saveJaxBBasedBookInformation\". Passing the tainted value \"in\" to a weakly configured XML parser. An attacker-controlled DTD may include external entity URLs, and the resolution of external entities may expose sensitive data or result in unwanted server requests. Processing an attacker-controlled DTD may also result in an overwhelming number of entity expansions, causing denial of service."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 176
                                                    }
                                                },
                                                "message": {
                                                    "text": "The recommended and strongest prevention against both external entity and entity expansion attacks is to disable DTD processing in the parser. Set the XML parser configuration to disable DTD processing."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/D4404DB4D403235A9D116E5A532E7164?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DBad+Use+Of+Null-like+Value%26context%3AtoolType%3Dsast)\n\nDereference of an explicit null value"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                },
                                "region": {
                                    "startLine": 131
                                }
                            }
                        }
                    ],
                    "ruleId": "null_pointer_dereference_exception:constant_null|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0dc54ec16f51ed4355efb5f6c12ba2f3750427d00e727a58cddb898796c5111a"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 119
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"algorithm.startsWith(\"HS\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_HMAC_ALGORITHM_IDENTIFIER */)\", taking false branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 122
                                                    }
                                                },
                                                "message": {
                                                    "text": "Assigning: \"verifier\" = \"null\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 123
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"algorithm.startsWith(\"PS\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_RSA_PSS_ALGORITHM_IDENTIFIER */)\", taking false branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 123
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"algorithm.startsWith(\"RS\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_RSA_ALGORITHM_IDENTIFIER */)\", taking false branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 126
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"algorithm.startsWith(\"EC\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_EC_ALGORITHM_IDENTIFIER */)\", taking false branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 131
                                                    }
                                                },
                                                "message": {
                                                    "text": "Passing null pointer \"verifier\" to \"verify\", which dereferences it."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/31E2EA6F6CA3DF1561A2612FBEF58166?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDm%3A+Dubious+method+used%26context%3AtoolType%3Dsast)\n\nFound a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DM_DEFAULT_ENCODING\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/pathTraversal/PathTraversalVulnerability.java"
                                },
                                "region": {
                                    "startLine": 51
                                }
                            }
                        }
                    ],
                    "ruleId": "FB.DM_DEFAULT_ENCODING|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ec675804c98ae73d18e37acdc1fea6bebaa64a96c7886026cfb155cf6f172292"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/pathTraversal/PathTraversalVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 51
                                                    }
                                                },
                                                "message": {
                                                    "text": "Found reliance on default encoding: new java.io.InputStreamReader(InputStream)."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/0A99461C97319387CBA5DEE7621F93F7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DXML+External+Entity+%28XXE%29+Injection%26context%3AtoolType%3Dsast)\n\nJava API for XML processing's `DocumentBuilderFactory` or `SAXParserFactory` class has not been configured to prevent expansion of external entities during XML parsing. External entity expansion may cause a server-side request forgery, denial of service, exposure of sensitive data or unwanted server requests. "
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                },
                                "region": {
                                    "startLine": 147
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.xml_external_entity_enabled:documentbuilder_saxparser|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cc8fece4403e868b5d3e5385d3782d1eeaa6675bf6e856b4324ca38a8a6b8e0f"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 147
                                                    }
                                                },
                                                "message": {
                                                    "text": "Java API for XML processing's `DocumentBuilderFactory` or `SAXParserFactory` class has not been configured to prevent expansion of external entities during XML parsing. External entity expansion may cause a server-side request forgery, denial of service, exposure of sensitive data or unwanted server requests."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 147
                                                    }
                                                },
                                                "message": {
                                                    "text": "To properly configure the `DocumentBuilderFactory` or `SAXParserFactory` the preferred solution is to:  * Disable DTD by setting `http://apache.org/xml/features/disallow-doctype-decl` to `true` and Alternatively, perform all of the following : * Disable External Entity Expansion by setting `http://xml.org/sax/features/external-general-entities`, `http://xml.org/sax/features/external-parameter-entities`, and `http://apache.org/xml/features/nonvalidating/load-external-dtd` to `false`. * Either enable secure processing mode by setting `XMLConstants.FEATURE_SECURE_PROCESSING` to `true` or disable expansion of entity references using `factory.setExpandEntityReferences(false);` Alternatively, perform the following : * Set attributes `XMLConstants.ACCESS_EXTERNAL_DTD` and `XMLConstants.ACCESS_EXTERNAL_SCHEMA` to `\"\"`"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/1EB5863866051B5A62CCB9E6BACC935B?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Access+Control%26context%3AtoolType%3Dsast)\n\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 13
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.least_privilege_violation:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e45fd8274ec3a3edb7780cb2a41a59d527fc2abe42f4b383bbdc3cb015a8da6f"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 13
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 13
                                                    }
                                                },
                                                "message": {
                                                    "text": "Remove all the default capabilities from the list of capabilities by setting the `cap_drop` value to `ALL` and then add only specific capabilities needed by a container."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/36E65F2AE814E937B02603083363BBC2?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInsecure+Link+Target%26context%3AtoolType%3Dsast)\n\nThe application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "build/resources/main/static/index.html"
                                },
                                "region": {
                                    "startLine": 34
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.reverse_tabnabbing:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "db878174985e020acab140b83e0071e136379fc4eb96164de8fafa099275d694"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/resources/main/static/index.html"
                                                    },
                                                    "region": {
                                                        "startLine": 34
                                                    }
                                                },
                                                "message": {
                                                    "text": "The application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/resources/main/static/index.html"
                                                    },
                                                    "region": {
                                                        "startLine": 34
                                                    }
                                                },
                                                "message": {
                                                    "text": "Set the `rel` attribute to include the `noopener` value, thus disallowing the linked page to access the original page through the `window.opener` object."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/3904F302E4A75887B7C01DC5DF5C0DEB?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInsecure+Link+Target%26context%3AtoolType%3Dsast)\n\nThe application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/resources/static/index.html"
                                },
                                "region": {
                                    "startLine": 34
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.reverse_tabnabbing:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6b4402a2a8d82778899d077c345b69ffc32c87179ff8290a5ffc3c916066a945"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/resources/static/index.html"
                                                    },
                                                    "region": {
                                                        "startLine": 34
                                                    }
                                                },
                                                "message": {
                                                    "text": "The application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/resources/static/index.html"
                                                    },
                                                    "region": {
                                                        "startLine": 34
                                                    }
                                                },
                                                "message": {
                                                    "text": "Set the `rel` attribute to include the `noopener` value, thus disallowing the linked page to access the original page through the `window.opener` object."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/8ED2900F618BCD158934DD9D5F1065D7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 374
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3dae5cdb8c9aeb873ad3f713b97f746f1b1401c33f6a92e2fe328ff1ab4062a8"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 374
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getOriginalFilename\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"org.springframework.web.multipart.MultipartFile.getOriginalFilename()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 374
                                                    }
                                                },
                                                "message": {
                                                    "text": "Creating a tainted string using \"file.getOriginalFilename()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 374
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"genericFileUploadUtility\". Constructing a path or URI using the tainted value in \"org.sasanlabs.service.vulnerability.fileupload.UnrestrictedFileUpload.RANDOM.nextInt() + \"_\" + file.getOriginalFilename()\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 374
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/4E3932CE2D6436AA4DEBB92566D23920?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 267
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6759dc390c686030571a48fc216ea592ce06d9916b5feee34070ed2ade1d9db0"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 267
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getOriginalFilename\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"org.springframework.web.multipart.MultipartFile.getOriginalFilename()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 267
                                                    }
                                                },
                                                "message": {
                                                    "text": "Creating a tainted string using \"file.getOriginalFilename()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 267
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"genericFileUploadUtility\". Constructing a path or URI using the tainted value in \"org.sasanlabs.service.vulnerability.fileupload.UnrestrictedFileUpload.RANDOM.nextInt() + \"_\" + file.getOriginalFilename()\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 267
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/B58714EC190333C044DF0A1208BDB56B?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInclusion+of+Functionality+from+Untrusted+Control+Sphere%26context%3AtoolType%3Dsast)\n\nThe Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 7
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.unspecified_software_version:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a69dfe517fb0f67e7e944c14d4e6bf15370619e26f44ec177a925d223d2756bb"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly set the `image` attribute to a specific stable version."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/3CACE50C4DEEED42BF4484F054D104F4?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUse+of+Hard-coded+Credentials%26context%3AtoolType%3Dsast)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "build/resources/main/scripts/PathTraversal/secret.json"
                                },
                                "region": {
                                    "startLine": 3
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b0b2ea67a901a4b52e468bbcd360d54982ce01167814c74435c9d976b6fac928"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/resources/main/scripts/PathTraversal/secret.json"
                                                    },
                                                    "region": {
                                                        "startLine": 3
                                                    }
                                                },
                                                "message": {
                                                    "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to. Secret type: Password."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/resources/main/scripts/PathTraversal/secret.json"
                                                    },
                                                    "region": {
                                                        "startLine": 3
                                                    }
                                                },
                                                "message": {
                                                    "text": "Avoid setting sensitive configuration values as string literals. Instead, these values should be set using variables with the sensitive data loaded from an encrypted file or a secret store."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/0318F8E7D9274C8890B98399C12962D4?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                },
                                "region": {
                                    "startLine": 37
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "35bb227385fb50b2c04fe4834652d838749f0cd6f75323e030fd130ce2a5863c"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 35
                                                    }
                                                },
                                                "message": {
                                                    "text": "\"fetchFile\" is an entry point function."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 35
                                                    }
                                                },
                                                "message": {
                                                    "text": "The \"fileName\" is tainted."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 37
                                                    }
                                                },
                                                "message": {
                                                    "text": "Creating a tainted string using \"fileName\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 37
                                                    }
                                                },
                                                "message": {
                                                    "text": "Passing \"unrestrictedFileUpload.getContentDispositionRoot().toFile() + \"/\" + fileName\" to \"FileInputStream\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 37
                                                    }
                                                },
                                                "message": {
                                                    "text": "Constructing a path or URI using the tainted value in \"unrestrictedFileUpload.getContentDispositionRoot().toFile() + \"/\" + fileName\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 37
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/FF8184D6E30CF0C34DC910A02CD12492?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 7
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_privilege_escalation_allowed:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c251a9bceec58a180fc9abbb85ef1e80ac146791a664546f183ae35da3e27010"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "Disable container privilege escalation by explicitly setting `no-new-privileges` to `true`."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/787E14B63F4760FA1AE16CDA24A35AFF?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInsufficient+Logging%26context%3AtoolType%3Dsast)\n\nA security exception is caught but not logged."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                },
                                "region": {
                                    "startLine": 137
                                }
                            }
                        }
                    ],
                    "ruleId": "unlogged_security_exception|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b48e1eeab2447a16a83059c10f3dfab90cfd2ed856682d3af1326a0517545e1c"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 130
                                                    }
                                                },
                                                "message": {
                                                    "text": "Throwing \"java.io.IOException\" (or subclass) from call to \"toString\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 136
                                                    }
                                                },
                                                "message": {
                                                    "text": "Catching exception."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 136
                                                    }
                                                },
                                                "message": {
                                                    "text": "\"java.security.NoSuchAlgorithmException\" is a security exception."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 136
                                                    }
                                                },
                                                "message": {
                                                    "text": "Log this exception properly, including all the relevant information required for the analysis of this event."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 137
                                                    }
                                                },
                                                "message": {
                                                    "text": "Exiting the catch block without logging the security exception."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/48F978F52135114FACA539F051B5E2D7?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DComparison+of+Object+References+Instead+of+Object+Contents%26context%3AtoolType%3Dsast)\n\nThis class defines a \u003ccode\u003ecompareTo(...)\u003c/code\u003e method but inherits its \u003ccode\u003eequals()\u003c/code\u003e method from \u003ccode\u003ejava.lang.Object\u003c/code\u003e. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.EQ_COMPARETO_USE_OBJECT_EQUALS\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/beans/LevelResponseBean.java"
                                },
                                "region": {
                                    "startLine": 115
                                }
                            }
                        }
                    ],
                    "ruleId": "FB.EQ_COMPARETO_USE_OBJECT_EQUALS|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6243e9c1d4d8570189653b7643ca10cf1c8ec47c4acc197db37e8aaaad99272f"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/beans/LevelResponseBean.java"
                                                    },
                                                    "region": {
                                                        "startLine": 115
                                                    }
                                                },
                                                "message": {
                                                    "text": "org.sasanlabs.beans.LevelResponseBean defines compareTo(LevelResponseBean) and uses Object.equals()."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/D61840A93394143871AAA513CC0DFFC3?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Access+Control%26context%3AtoolType%3Dsast)\n\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 4
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.least_privilege_violation:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "fe22193e5946db2e8292eecfbc85b12b2dc485a8134c77307031c177496d7c96"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "Remove all the default capabilities from the list of capabilities by setting the `cap_drop` value to `ALL` and then add only specific capabilities needed by a container."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/D5384CA6CE0AFB58DD7D8F18CE4A369F?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 4
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_privilege_escalation_allowed:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8eefaf5b9929a42896272541f75aab1ecd30c7f397cba168c7bffb6d01bc5e76"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "Disable container privilege escalation by explicitly setting `no-new-privileges` to `true`."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/3E9B5C160756DCD01F9EA652F3F08428?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Control+of+Document+Type+Definition%26context%3AtoolType%3Dsast)\n\nPassing tainted input data with possibly arbitrary DTDs to a weakly configured XML parser."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                },
                                "region": {
                                    "startLine": 149
                                }
                            }
                        }
                    ],
                    "ruleId": "xml_external_entity:unrestricted_dtds|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "82d6ea862779c334acd80ea6333b0dbddd68de810c4447b2e783426e82d55032"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 145
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getInputStream\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"javax.servlet.ServletRequest.getInputStream()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 145
                                                    }
                                                },
                                                "message": {
                                                    "text": "Assigning: \"in\" = \"request.getInputStream()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 149
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"saveJaxBBasedBookInformation\". Passing the tainted value \"in\" to a weakly configured XML parser. An attacker-controlled DTD may include external entity URLs, and the resolution of external entities may expose sensitive data or result in unwanted server requests. Processing an attacker-controlled DTD may also result in an overwhelming number of entity expansions, causing denial of service."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 149
                                                    }
                                                },
                                                "message": {
                                                    "text": "The recommended and strongest prevention against both external entity and entity expansion attacks is to disable DTD processing in the parser. Set the XML parser configuration to disable DTD processing."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/3B3C2B1F1D402CFEEC98E0D05CBE0405?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 13
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_privilege_escalation_allowed:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2b6dc65c24e44529d47f3fa3f9abef7a1208fc806ba93e834c497e806e28dc64"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 13
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 13
                                                    }
                                                },
                                                "message": {
                                                    "text": "Disable container privilege escalation by explicitly setting `no-new-privileges` to `true`."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/0829752C8EF2DD090760AC5602CA92BC?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DExpression+is+Always+False%26context%3AtoolType%3Dsast)\n\nThis cast will always throw a ClassCastException. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.BC_IMPOSSIBLE_CAST\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java"
                                },
                                "region": {
                                    "startLine": 217
                                }
                            }
                        }
                    ],
                    "ruleId": "FB.BC_IMPOSSIBLE_CAST|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "45e7786bc5cf9678449044a25d861ba781bf223c24667341c99da9b2d11212c0"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java"
                                                    },
                                                    "region": {
                                                        "startLine": 217
                                                    }
                                                },
                                                "message": {
                                                    "text": "Impossible cast from String to java.util.List."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/695887B96D4701B939B98E28B90B125C?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Resource+Shutdown+or+Release%26context%3AtoolType%3Dsast)\n\nLeak of a system resource"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                },
                                "region": {
                                    "startLine": 90
                                }
                            }
                        }
                    ],
                    "ruleId": "resource_leak|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1077db1f84acad17c60c488a8e851523eeb8787dd99ba0d95a8e07d520f68373"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 90
                                                    }
                                                },
                                                "message": {
                                                    "text": "A new resource is returned from allocation method \"getResourceAsStream\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 90
                                                    }
                                                },
                                                "message": {
                                                    "text": "Resource \"(java.lang.Class)getClass().getClassLoader().getResourceAsStream(\"sasanlabs.p12\")\" is not closed or saved in \"load\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 90
                                                    }
                                                },
                                                "message": {
                                                    "text": "Failing to save or close resource created by \"(java.lang.Class)getClass().getClassLoader().getResourceAsStream(\"sasanlabs.p12\")\" leaks it."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/D4633D762E304EE6B6F24D32FBC7105A?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUse+of+Hard-coded+Password%26context%3AtoolType%3Dsast)\n\nA password is stored directly in the source code."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                },
                                "region": {
                                    "startLine": 95
                                }
                            }
                        }
                    ],
                    "ruleId": "hardcoded_credentials:password|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "78e9c23977ec1fa40422ba40a6378f6f9fc71d4cd24c30b47e3d1b935d33b069"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 95
                                                    }
                                                },
                                                "message": {
                                                    "text": "The constant string \"\"changeIt\"\" is a credential or key."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 95
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"toCharArray\". This call assigns \"\"changeIt\"\" to \"\u003creturn value\u003e\". (The virtual call resolves to \"java.lang.String.toCharArray()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 95
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getKey\". This call uses the constant string as a password. (The virtual call resolves to \"java.security.KeyStore.getKey(java.lang.String, char[])\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 95
                                                    }
                                                },
                                                "message": {
                                                    "text": "Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/2968855D0FC1D44C7E27931F92523235?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DFiles+or+Directories+Accessible+to+External+Parties%26context%3AtoolType%3Dsast)\n\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 13
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_filesystem_write:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f63f7c6477488c36e3990115126d55f433ed7432c79832bb17ddb480055c41c6"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 13
                                                    }
                                                },
                                                "message": {
                                                    "text": "The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 13
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly set the `read-only` attribute of the service to `true` to create a service container with a read-only filesystem."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/3C19EFCB6487360DF89DE30D9E3E5E84?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Resource+Shutdown+or+Release%26context%3AtoolType%3Dsast)\n\nLeak of a system resource"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java"
                                },
                                "region": {
                                    "startLine": 675
                                }
                            }
                        }
                    ],
                    "ruleId": "resource_leak|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1c434c44d38705ab13ad6a1d2489d761118303231826093c72bc6dc215ddb19f"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 650
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"!isFetch\", taking true branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 651
                                                    }
                                                },
                                                "message": {
                                                    "text": "Iterating over another element of \"tokens\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 651
                                                    }
                                                },
                                                "message": {
                                                    "text": "No elements left in \"tokens\", leaving loop."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 653
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"cookieKeyValue[0].equals(\"JWT\" /* org.sasanlabs.service.vulnerability.jwt.JWTVulnerability.JWT */)\", taking false branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 673
                                                    }
                                                },
                                                "message": {
                                                    "text": "Jumping back to the beginning of the loop."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 675
                                                    }
                                                },
                                                "message": {
                                                    "text": "A new resource is returned from allocation method \"getResourceAsStream\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 675
                                                    }
                                                },
                                                "message": {
                                                    "text": "Resource \"(java.lang.Class)this.getClass().getClassLoader().getResourceAsStream(\"static/templates/JWTVulnerability/keys/private_key.pem\")\" is not closed or saved in \"getRSAPrivateKeyFromProvidedPEMFilePath\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 675
                                                    }
                                                },
                                                "message": {
                                                    "text": "Failing to save or close resource created by \"(java.lang.Class)this.getClass().getClassLoader().getResourceAsStream(\"static/templates/JWTVulnerability/keys/private_key.pem\")\" leaks it."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/5DDFE7C28D55A08656AB9B0B9158C403?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInclusion+of+Functionality+from+Untrusted+Control+Sphere%26context%3AtoolType%3Dsast)\n\nThe Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 17
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.unspecified_software_version:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "79b550688d5d06a76a37384b92cb1be069fc568cebc0a21201dca3f7a104aee9"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 17
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 17
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly set the `image` attribute to a specific stable version."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/3CE7E47FE0D765A81D20266354DCBB8F?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 4
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_requesting_net_raw:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "14ddfa78e80200c7baa2fcb1837673c91fa88641f60535939d55a79ad193b45a"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/711D18767A8BC1077668030AC93DD04F?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DExpected+Behavior+Violation%26context%3AtoolType%3Dsast)\n\nThis code constructs a File object using a hard coded to an absolute pathname (e.g., \u003ccode\u003enew File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");\u003c/code\u003e (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DMI_HARDCODED_ABSOLUTE_FILENAME\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 82
                                }
                            }
                        }
                    ],
                    "ruleId": "FB.DMI_HARDCODED_ABSOLUTE_FILENAME|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c273d39c0e09dddd8edc9b0169e1662af2b17352501f0670e182787893f7e9d3"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 82
                                                    }
                                                },
                                                "message": {
                                                    "text": "Hard coded reference to an absolute pathname."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/18C141BD6C267731EF556C174B183D8C?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DFiles+or+Directories+Accessible+to+External+Parties%26context%3AtoolType%3Dsast)\n\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 4
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_filesystem_write:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d2beb6d77471aadf1d234fa107a10925aab898421678f8b1fdf9e61a6f4dfc01"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly set the `read-only` attribute of the service to `true` to create a service container with a read-only filesystem."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/1FD59E31DA70D738253E04EE080BF400?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DExpression+is+Always+False%26context%3AtoolType%3Dsast)\n\nThis cast will always throw a ClassCastException. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.BC_IMPOSSIBLE_CAST\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java"
                                },
                                "region": {
                                    "startLine": 195
                                }
                            }
                        }
                    ],
                    "ruleId": "FB.BC_IMPOSSIBLE_CAST|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8ff7525fd4daed5bdc1e77f79702b19509716937a9e3c569c1fd7445071ea1bd"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java"
                                                    },
                                                    "region": {
                                                        "startLine": 195
                                                    }
                                                },
                                                "message": {
                                                    "text": "Impossible cast from String to java.util.List."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/64763755D0B841CD26C830BEA8229AC0?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 169
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "71092c9a9df416b1dde184f049b37c5df996acddf4cb3f70f75355c1273c6d27"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 169
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getOriginalFilename\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"org.springframework.web.multipart.MultipartFile.getOriginalFilename()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 169
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"genericFileUploadUtility\". Constructing a path or URI using the tainted value in \"file.getOriginalFilename()\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 169
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/E58D5BD05BB11A451751802EF3D2A774?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInsertion+of+Sensitive+Information+Into+Sent+Data%26context%3AtoolType%3Dsast)\n\nHTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "build/spotless-node-modules-prettier-format/serve.js"
                                },
                                "region": {
                                    "startLine": 3
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.verbose_server_banner:express|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0331af0ed66c273008a71f1a082dbb136e39ff9a3b8254a48ca3d045aade059b"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/spotless-node-modules-prettier-format/serve.js"
                                                    },
                                                    "region": {
                                                        "startLine": 3
                                                    }
                                                },
                                                "message": {
                                                    "text": "HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/spotless-node-modules-prettier-format/serve.js"
                                                    },
                                                    "region": {
                                                        "startLine": 3
                                                    }
                                                },
                                                "message": {
                                                    "text": "Use `app.disable('x-powered-by')` to disable the `X-Powered-By` header. If you're using an older version of Express that does not support this setting and you can't upgrade, create a middleware to call `res.removeHeader(\"x-powered-by\")` where `res` is the response object."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/699C04205B71F0089DF42B3D383D29E1?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 211
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "66c5fa358d9a08c2052ee1478130dbf6ef2c5f6ef805247306b1975016715898"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 211
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getOriginalFilename\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"org.springframework.web.multipart.MultipartFile.getOriginalFilename()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 211
                                                    }
                                                },
                                                "message": {
                                                    "text": "Creating a tainted string using \"file.getOriginalFilename()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 211
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"genericFileUploadUtility\". Constructing a path or URI using the tainted value in \"org.sasanlabs.service.vulnerability.fileupload.UnrestrictedFileUpload.RANDOM.nextInt() + \"_\" + file.getOriginalFilename()\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 211
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/67724FF5E6CA903A0F5B6EC2F7C89F22?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 296
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "52ff98458ef201cbfd13d0b96d7085cd8795969a971e47eafb4e7ba981d84617"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 296
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getOriginalFilename\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"org.springframework.web.multipart.MultipartFile.getOriginalFilename()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 296
                                                    }
                                                },
                                                "message": {
                                                    "text": "Creating a tainted string using \"file.getOriginalFilename()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 296
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"genericFileUploadUtility\". Constructing a path or URI using the tainted value in \"org.sasanlabs.service.vulnerability.fileupload.UnrestrictedFileUpload.RANDOM.nextInt() + \"_\" + file.getOriginalFilename()\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 296
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/E3427DE66E7937D2E3426008EA238E9D?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInsufficient+Logging%26context%3AtoolType%3Dsast)\n\nA security exception is caught but not logged."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                },
                                "region": {
                                    "startLine": 160
                                }
                            }
                        }
                    ],
                    "ruleId": "unlogged_security_exception|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c45277dc43b06ed501b7b5c158254b5a4ec7dba8dd9a7b957f25ccdd31832251"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 153
                                                    }
                                                },
                                                "message": {
                                                    "text": "Throwing \"java.io.IOException\" (or subclass) from call to \"toString\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 159
                                                    }
                                                },
                                                "message": {
                                                    "text": "Catching exception."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 159
                                                    }
                                                },
                                                "message": {
                                                    "text": "\"java.security.NoSuchAlgorithmException\" is a security exception."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 159
                                                    }
                                                },
                                                "message": {
                                                    "text": "Log this exception properly, including all the relevant information required for the analysis of this event."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java"
                                                    },
                                                    "region": {
                                                        "startLine": 160
                                                    }
                                                },
                                                "message": {
                                                    "text": "Exiting the catch block without logging the security exception."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/5A5E082479F5F890A6ACE4AAF20D75E3?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDirectory+Traversal%26context%3AtoolType%3Dsast)\n\nA user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 237
                                }
                            }
                        }
                    ],
                    "ruleId": "path_manipulation|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3bfca316cd32a073e287f54ecc66fb18950045e77c2a111c905cd2bb700cac9a"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 237
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getOriginalFilename\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"org.springframework.web.multipart.MultipartFile.getOriginalFilename()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 237
                                                    }
                                                },
                                                "message": {
                                                    "text": "Creating a tainted string using \"file.getOriginalFilename()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 237
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"genericFileUploadUtility\". Constructing a path or URI using the tainted value in \"org.sasanlabs.service.vulnerability.fileupload.UnrestrictedFileUpload.RANDOM.nextInt() + \"_\" + file.getOriginalFilename()\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 237
                                                    }
                                                },
                                                "message": {
                                                    "text": "Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/F6D8843420E2207FC23E0517CAD5133D?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Control+of+Document+Type+Definition%26context%3AtoolType%3Dsast)\n\nPassing tainted input data with possibly arbitrary DTDs to a weakly configured XML parser."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                },
                                "region": {
                                    "startLine": 202
                                }
                            }
                        }
                    ],
                    "ruleId": "xml_external_entity:unrestricted_dtds|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ea713074bb43248d106d25ba4675636f47df7afaa0240110cf6d25e9be40ece3"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 194
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"getInputStream\". Reading data from an HTTP request, which is considered tainted (The virtual call resolves to \"javax.servlet.ServletRequest.getInputStream()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 194
                                                    }
                                                },
                                                "message": {
                                                    "text": "Assigning: \"in\" = \"request.getInputStream()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 202
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"saveJaxBBasedBookInformation\". Passing the tainted value \"in\" to a weakly configured XML parser. An attacker-controlled DTD may include external entity URLs, and the resolution of external entities may expose sensitive data or result in unwanted server requests. Processing an attacker-controlled DTD may also result in an overwhelming number of entity expansions, causing denial of service."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 202
                                                    }
                                                },
                                                "message": {
                                                    "text": "The recommended and strongest prevention against both external entity and entity expansion attacks is to disable DTD processing in the parser. Set the XML parser configuration to disable DTD processing."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/53C17884BC92F2DBB0C06B2E132DEF90?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Access+Control%26context%3AtoolType%3Dsast)\n\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 10
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.least_privilege_violation:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "98f39ca0cadb1ab7724efce09a2d454b1bd5d06aafc129c889b5f44abda3474c"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "Remove all the default capabilities from the list of capabilities by setting the `cap_drop` value to `ALL` and then add only specific capabilities needed by a container."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/F77A0B7A2BDF2BE0451A5B70A9050B29?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInclusion+of+Functionality+from+Untrusted+Control+Sphere%26context%3AtoolType%3Dsast)\n\nThe Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 10
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.unspecified_software_version:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e070d10160b53ea6e89f9b7bb6ed51b3b63ef44a5be2dd249c6fa75faf59b31b"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly set the `image` attribute to a specific stable version."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/3009B703D65A657D0A09528C97123312?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDm%3A+Dubious+method+used%26context%3AtoolType%3Dsast)\n\nFound a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DM_DEFAULT_ENCODING\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/commandInjection/CommandInjection.java"
                                },
                                "region": {
                                    "startLine": 55
                                }
                            }
                        }
                    ],
                    "ruleId": "FB.DM_DEFAULT_ENCODING|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "22ea3df5017570309a898e5afac66ee318cbd7db35e92efcab381256c36c15cf"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/commandInjection/CommandInjection.java"
                                                    },
                                                    "region": {
                                                        "startLine": 55
                                                    }
                                                },
                                                "message": {
                                                    "text": "Found reliance on default encoding: new java.io.InputStreamReader(InputStream)."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/4F7E41843C051DAC26731B7657B09EA1?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DExpression+is+Always+False%26context%3AtoolType%3Dsast)\n\nThis cast will always throw a ClassCastException. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.BC_IMPOSSIBLE_CAST\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java"
                                },
                                "region": {
                                    "startLine": 64
                                }
                            }
                        }
                    ],
                    "ruleId": "FB.BC_IMPOSSIBLE_CAST|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "19e2640763380ee338bda036fa8a246008c439780710334650bfe6ff50f1152a"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java"
                                                    },
                                                    "region": {
                                                        "startLine": 64
                                                    }
                                                },
                                                "message": {
                                                    "text": "Impossible cast from String to java.util.List."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/1478C895F5B39EE19C15FC5A29EF182D?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 10
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_requesting_net_raw:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "37d58f6e378d09ba69874b1bb126e60159d6f11fbb893a4fb2430f6f1611b320"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/93C8F9BD43B2F7A18D751E474ECD835D?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DFiles+or+Directories+Accessible+to+External+Parties%26context%3AtoolType%3Dsast)\n\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 10
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_filesystem_write:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "57263b41f5008fe60aca75dfbd35e3f75cfbb6305c3f4364d2f603cf0e7a3979"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly set the `read-only` attribute of the service to `true` to create a service container with a read-only filesystem."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/DA1E22C7065F43E06854ACD399961A33?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUse+of+Hard-coded+Credentials%26context%3AtoolType%3Dsast)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "build/resources/main/application.properties"
                                },
                                "region": {
                                    "startLine": 7
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3d7135d8e09552a1f5b40de69febed9d64a593a07c58e4a5836906b3d8ee6ec1"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/resources/main/application.properties"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to. Secret type: Password."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/resources/main/application.properties"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "Avoid setting sensitive configuration values as string literals. Instead, these values should be set using variables with the sensitive data loaded from an encrypted file or a secret store."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/ECF7607A3F126F1B8967746F1B7EB276?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DFiles+or+Directories+Accessible+to+External+Parties%26context%3AtoolType%3Dsast)\n\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 7
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_filesystem_write:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "34c4f820a95c7543378275fa85ec11a4755e1f8b1014276eba6f72b7f8abdb17"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly set the `read-only` attribute of the service to `true` to create a service container with a read-only filesystem."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/01F0DA31C4BB6D1C5EE0B8C8C2EF089B?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Access+Control%26context%3AtoolType%3Dsast)\n\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 7
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.least_privilege_violation:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "de39e2d93df573924e72e55ffa760af0974d38fe4b85c668a666274cb9687e84"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "Remove all the default capabilities from the list of capabilities by setting the `cap_drop` value to `ALL` and then add only specific capabilities needed by a container."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/D4C6D97BC807DF13C3C5D0F050B75AD1?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DNULL+Pointer+Dereference%26context%3AtoolType%3Dsast)\n\nReturn value of function which returns null is dereferenced without checking"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                },
                                "region": {
                                    "startLine": 69
                                }
                            }
                        }
                    ],
                    "ruleId": "null_pointer_dereference_exception:return_value|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "aa55fa91323803105af5d54919c5a940e394802fa9ccc8964b9def521983c66c"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 69
                                                    }
                                                },
                                                "message": {
                                                    "text": "\"getResource\" returns \"null\" (checked 1 out of 5 times)."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 69
                                                    }
                                                },
                                                "message": {
                                                    "text": "Example 1: \"getResource\" has its value checked in bytecode method \"org.springframework.core.SpringProperties.\u003cclinit\u003e()\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java"
                                                    },
                                                    "region": {
                                                        "startLine": 69
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling a method on null object \"java.lang.Thread.currentThread().getContextClassLoader().getResource(\"static\")\"."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/54D9407762E156E048BEE70B68FE40F2?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DXML+External+Entity+%28XXE%29+Injection%26context%3AtoolType%3Dsast)\n\nJava API for XML processing's `DocumentBuilderFactory` or `SAXParserFactory` class has not been configured to prevent expansion of external entities during XML parsing. External entity expansion may cause a server-side request forgery, denial of service, exposure of sensitive data or unwanted server requests. "
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                },
                                "region": {
                                    "startLine": 172
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.xml_external_entity_enabled:documentbuilder_saxparser|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f869ef085a8396b3f1ab41b73e2a81190e331f8909c65830fe3fae38933307ca"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 172
                                                    }
                                                },
                                                "message": {
                                                    "text": "Java API for XML processing's `DocumentBuilderFactory` or `SAXParserFactory` class has not been configured to prevent expansion of external entities during XML parsing. External entity expansion may cause a server-side request forgery, denial of service, exposure of sensitive data or unwanted server requests."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 172
                                                    }
                                                },
                                                "message": {
                                                    "text": "To properly configure the `DocumentBuilderFactory` or `SAXParserFactory` the preferred solution is to:  * Disable DTD by setting `http://apache.org/xml/features/disallow-doctype-decl` to `true` and Alternatively, perform all of the following : * Disable External Entity Expansion by setting `http://xml.org/sax/features/external-general-entities`, `http://xml.org/sax/features/external-parameter-entities`, and `http://apache.org/xml/features/nonvalidating/load-external-dtd` to `false`. * Either enable secure processing mode by setting `XMLConstants.FEATURE_SECURE_PROCESSING` to `true` or disable expansion of entity references using `factory.setExpandEntityReferences(false);` Alternatively, perform the following : * Set attributes `XMLConstants.ACCESS_EXTERNAL_DTD` and `XMLConstants.ACCESS_EXTERNAL_SCHEMA` to `\"\"`"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/E8D18E93CC07FB703C021CAE0790E2E8?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 7
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_requesting_net_raw:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f8cd4612f7a5628ea0559cd9035ef31229a87faedd1c17257185c21a90e73208"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 7
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/34D1FE628D25AB67AC545A7A74DA0398?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 13
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_requesting_net_raw:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "5bda20ec64b903335446deb7f1c9532f7342eba7bd750cfd370cab630591627f"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 13
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 13
                                                    }
                                                },
                                                "message": {
                                                    "text": "Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/123ED4ACA147C5BB880F47B76B7A302E?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Privilege+Management%26context%3AtoolType%3Dsast)\n\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 10
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_privilege_escalation_allowed:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ab1d0a111bd8bcd33f920d755ac6f130e14fd0bba35d74a53f1742bbacac0233"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "docker-compose.yml"
                                                    },
                                                    "region": {
                                                        "startLine": 10
                                                    }
                                                },
                                                "message": {
                                                    "text": "Disable container privilege escalation by explicitly setting `no-new-privileges` to `true`."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/13C1AC50E8CCE7C129203DCA8998152F?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DInsufficient+Logging%26context%3AtoolType%3Dsast)\n\nA security exception is caught but not logged."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java"
                                },
                                "region": {
                                    "startLine": 67
                                }
                            }
                        }
                    ],
                    "ruleId": "unlogged_security_exception|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a74194cf1383d255e0124dde0de6ca2185d3a1a72f7ef76c40c1041f57035d8e"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 51
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_HMAC_ALGO_TO_JAVA_ALGORITHM_MAPPING.containsKey(algorithm)\", taking true branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 52
                                                    }
                                                },
                                                "message": {
                                                    "text": "Throwing \"java.security.NoSuchAlgorithmException\" from call to \"getInstance\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 66
                                                    }
                                                },
                                                "message": {
                                                    "text": "Catching exception."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 66
                                                    }
                                                },
                                                "message": {
                                                    "text": "\"java.security.InvalidKeyException\" is a security exception."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 66
                                                    }
                                                },
                                                "message": {
                                                    "text": "Log this exception properly, including all the relevant information required for the analysis of this event."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 67
                                                    }
                                                },
                                                "message": {
                                                    "text": "Exiting the catch block without logging the security exception."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/CAEA2D5A16D4553926223DD112C1A614?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUrF%3A+Unread+field%26context%3AtoolType%3Dsast)\n\nThis field is never read. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.URF_UNREAD_FIELD\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/beans/ScannerResponseBean.java"
                                },
                                "region": {
                                    "startLine": 39
                                }
                            }
                        }
                    ],
                    "ruleId": "FB.URF_UNREAD_FIELD|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0d98af87545440f61c37f0b429d2bf726aa4050e60a4c08fc0f2d31e8ad9afb5"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/beans/ScannerResponseBean.java"
                                                    },
                                                    "region": {
                                                        "startLine": 39
                                                    }
                                                },
                                                "message": {
                                                    "text": "Unread field: org.sasanlabs.beans.ScannerResponseBean.variant."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/19100964E0284EF454DA5F4BF6D3047A?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUse+of+Hard-coded+Password%26context%3AtoolType%3Dsast)\n\nA password is stored directly in the source code."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                },
                                "region": {
                                    "startLine": 90
                                }
                            }
                        }
                    ],
                    "ruleId": "hardcoded_credentials:password|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e8417645350772ad06794a837de57b4b9f63ad1e00ce4456d4155aa94cd1a102"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 90
                                                    }
                                                },
                                                "message": {
                                                    "text": "The constant string \"\"changeIt\"\" is a credential or key."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 90
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"toCharArray\". This call assigns \"\"changeIt\"\" to \"\u003creturn value\u003e\". (The virtual call resolves to \"java.lang.String.toCharArray()\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 90
                                                    }
                                                },
                                                "message": {
                                                    "text": "Calling \"load\". This call uses the constant string as a password. (The virtual call resolves to \"java.security.KeyStore.load(java.io.InputStream, char[])\".)"
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java"
                                                    },
                                                    "region": {
                                                        "startLine": 90
                                                    }
                                                },
                                                "message": {
                                                    "text": "Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/0D125DFAA43A5E60CBB0DCD85AB32C2A?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DBad+Use+Of+Null-like+Value%26context%3AtoolType%3Dsast)\n\nDereference of an explicit null value"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                },
                                "region": {
                                    "startLine": 196
                                }
                            }
                        }
                    ],
                    "ruleId": "null_pointer_dereference_exception:constant_null|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "905894fa474c20f59b4ae643f83cb8f2080435be281d0fed51c968e4be12689d"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 170
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"header.has(\"alg\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_ALGORITHM_KEY_HEADER */)\", taking true branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 172
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"!alg.startsWith(\"HS\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_HMAC_ALGORITHM_IDENTIFIER */)\", taking true branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 173
                                                    }
                                                },
                                                "message": {
                                                    "text": "Assigning: \"verifier\" = \"null\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 174
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"header.has(\"jwk\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JSON_WEB_KEY_HEADER */)\", taking true branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 175
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"alg.startsWith(\"RS\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_RSA_ALGORITHM_IDENTIFIER */)\", taking false branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 175
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"alg.startsWith(\"PS\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_RSA_PSS_ALGORITHM_IDENTIFIER */)\", taking false branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 182
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"alg.startsWith(\"EC\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_EC_ALGORITHM_IDENTIFIER */)\", taking false branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 188
                                                    }
                                                },
                                                "message": {
                                                    "text": "Condition \"alg.startsWith(\"ED\" /* org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils.JWT_OCTET_ALGORITHM_IDENTIFIER */)\", taking false branch."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java"
                                                    },
                                                    "region": {
                                                        "startLine": 196
                                                    }
                                                },
                                                "message": {
                                                    "text": "Passing null pointer \"verifier\" to \"verify\", which dereferences it."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/6746E4C1F06EC6ACC9112BC15D4B76A9?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DDm%3A+Dubious+method+used%26context%3AtoolType%3Dsast)\n\nFound a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. (\u003ca href=\"/doc/en/spotbugs/sb_checker_ref.html#FB.DM_DEFAULT_ENCODING\" target=\"_blank\"\u003eFrom SpotBugs description\u003c/a\u003e)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java"
                                },
                                "region": {
                                    "startLine": 73
                                }
                            }
                        }
                    ],
                    "ruleId": "FB.DM_DEFAULT_ENCODING|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b6c2d5ae86ac361167cc0a9b1b62e6b170eb2437f1535f376c4e744c2e743435"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java"
                                                    },
                                                    "region": {
                                                        "startLine": 73
                                                    }
                                                },
                                                "message": {
                                                    "text": "Found reliance on default encoding: new java.io.InputStreamReader(InputStream)."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/8E521A5CFBED76949BDC68F515139777?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUse+of+Hard-coded+Credentials%26context%3AtoolType%3Dsast)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "build/resources/main/application.properties"
                                },
                                "region": {
                                    "startLine": 14
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2551ef3b8863868558ca2f278a2933e6124d3723abbdd66b8195b03ef0791df9"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/resources/main/application.properties"
                                                    },
                                                    "region": {
                                                        "startLine": 14
                                                    }
                                                },
                                                "message": {
                                                    "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to. Secret type: Password."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "build/resources/main/application.properties"
                                                    },
                                                    "region": {
                                                        "startLine": 14
                                                    }
                                                },
                                                "message": {
                                                    "text": "Avoid setting sensitive configuration values as string literals. Instead, these values should be set using variables with the sensitive data loaded from an encrypted file or a secret store."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/D70A3DD62EFD0434004DBBAEEEB7F69E?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DUse+of+Hard-coded+Credentials%26context%3AtoolType%3Dsast)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pim.json"
                                },
                                "region": {
                                    "startLine": 4
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "40f624f5e445afcf1cb4d94097bd1b20453b8eac3ead18e92957166c824d1687"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "pim.json"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to. Secret type: Access token."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "pim.json"
                                                    },
                                                    "region": {
                                                        "startLine": 4
                                                    }
                                                },
                                                "message": {
                                                    "text": "Avoid setting sensitive configuration values as string literals. Instead, these values should be set using variables with the sensitive data loaded from an encrypted file or a secret store."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "message": {
                        "text": "[See in Polaris](https://pim.altair.synopsys.com/portfolio/portfolios/fc7e733e-7956-43d0-8d0d-4aa33c4c2ef7/portfolio-items/9a20eb64-64b5-493f-b32d-385172f16564/projects/ce668b98-2710-445b-88ef-804981b8fd44/issues/787D1E99EE3446BA20123C9610373A33?branchId=852eca66-d3cd-45f5-9699-48451de6a738\u0026filter=issueType%3Alocalized-name%3DImproper+Resource+Shutdown+or+Release%26context%3AtoolType%3Dsast)\n\nLeak of a system resource"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                },
                                "region": {
                                    "startLine": 44
                                }
                            }
                        }
                    ],
                    "ruleId": "resource_leak|java",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "856cd98b50f3c224df7a481ed1e3e81834a7572830af936914b57a761950b1e2"
                    },
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 37
                                                    }
                                                },
                                                "message": {
                                                    "text": "\"new java.io.FileInputStream(unrestrictedFileUpload.getContentDispositionRoot().toFile() + \"/\" + fileName)\" creates a new resource."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 37
                                                    }
                                                },
                                                "message": {
                                                    "text": "Assigning: \"inputStream\" = resource returned from \"new java.io.FileInputStream(unrestrictedFileUpload.getContentDispositionRoot().toFile() + \"/\" + fileName)\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 44
                                                    }
                                                },
                                                "message": {
                                                    "text": "Resource \"inputStream\" is not closed or saved in \"toByteArray\"."
                                                }
                                            }
                                        },
                                        {
                                            "location": {
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "uri": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java"
                                                    },
                                                    "region": {
                                                        "startLine": 44
                                                    }
                                                },
                                                "message": {
                                                    "text": "Variable \"inputStream\" going out of scope leaks the resource it refers to."
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "version": "2.1.0"
}